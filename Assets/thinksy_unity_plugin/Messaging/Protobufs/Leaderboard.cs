// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Senseix.Message.Leaderboard {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Leaderboard {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Leaderboard_MemberData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.MemberData, global::Senseix.Message.Leaderboard.MemberData.Builder> internal__static_Senseix_Message_Leaderboard_MemberData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Leaderboard_PlayerData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.PlayerData, global::Senseix.Message.Leaderboard.PlayerData.Builder> internal__static_Senseix_Message_Leaderboard_PlayerData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.UpdatePlayerScoreRequest, global::Senseix.Message.Leaderboard.UpdatePlayerScoreRequest.Builder> internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.UpdatePlayerScoreResponse, global::Senseix.Message.Leaderboard.UpdatePlayerScoreResponse.Builder> internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Leaderboard_PlayerRankRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.PlayerRankRequest, global::Senseix.Message.Leaderboard.PlayerRankRequest.Builder> internal__static_Senseix_Message_Leaderboard_PlayerRankRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Leaderboard_PlayerRankResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.PlayerRankResponse, global::Senseix.Message.Leaderboard.PlayerRankResponse.Builder> internal__static_Senseix_Message_Leaderboard_PlayerRankResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Leaderboard() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFMZWFkZXJib2FyZC5wcm90bxIbU2Vuc2VpeC5NZXNzYWdlLkxlYWRlcmJv" + 
          "YXJkIiEKCk1lbWJlckRhdGESEwoLcGxheWVyX25hbWUYASACKAkiNwoKUGxh" + 
          "eWVyRGF0YRINCgVzY29yZRgBIAEoDRIMCgRyYW5rGAIgASgNEgwKBG5hbWUY" + 
          "AyABKAkiQwoYVXBkYXRlUGxheWVyU2NvcmVSZXF1ZXN0EhEKCXBsYXllcl9p" + 
          "ZBgBIAIoCRIUCgxwbGF5ZXJfc2NvcmUYAiACKA0iawoZVXBkYXRlUGxheWVy" + 
          "U2NvcmVSZXNwb25zZRIVCg10b3RhbF9tZW1iZXJzGAEgAigNEjcKBnBsYXll" + 
          "chgCIAIoCzInLlNlbnNlaXguTWVzc2FnZS5MZWFkZXJib2FyZC5QbGF5ZXJE" + 
          "YXRhIoQBChFQbGF5ZXJSYW5rUmVxdWVzdBIRCglwbGF5ZXJfaWQYASACKAkS" + 
          "DQoFY291bnQYAiABKA0SEQoJcGFnZV9zaXplGAMgASgNEjoKB3NvcnRfYnkY" + 
          "BCABKA4yIy5TZW5zZWl4Lk1lc3NhZ2UuTGVhZGVyYm9hcmQuU29ydEJ5OgRO" + 
          "T05FImQKElBsYXllclJhbmtSZXNwb25zZRIVCg10b3RhbF9tZW1iZXJzGAEg" + 
          "AigNEjcKBnBsYXllchgCIAMoCzInLlNlbnNlaXguTWVzc2FnZS5MZWFkZXJi" + 
          "b2FyZC5QbGF5ZXJEYXRhKicKBlNvcnRCeRIICgRSQU5LEAESCQoFU0NPUkUQ" + 
          "AhIICgROT05FEAM=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Senseix_Message_Leaderboard_MemberData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Senseix_Message_Leaderboard_MemberData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.MemberData, global::Senseix.Message.Leaderboard.MemberData.Builder>(internal__static_Senseix_Message_Leaderboard_MemberData__Descriptor,
                new string[] { "PlayerName", });
        internal__static_Senseix_Message_Leaderboard_PlayerData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Senseix_Message_Leaderboard_PlayerData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.PlayerData, global::Senseix.Message.Leaderboard.PlayerData.Builder>(internal__static_Senseix_Message_Leaderboard_PlayerData__Descriptor,
                new string[] { "Score", "Rank", "Name", });
        internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.UpdatePlayerScoreRequest, global::Senseix.Message.Leaderboard.UpdatePlayerScoreRequest.Builder>(internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreRequest__Descriptor,
                new string[] { "PlayerId", "PlayerScore", });
        internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.UpdatePlayerScoreResponse, global::Senseix.Message.Leaderboard.UpdatePlayerScoreResponse.Builder>(internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreResponse__Descriptor,
                new string[] { "TotalMembers", "Player", });
        internal__static_Senseix_Message_Leaderboard_PlayerRankRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Senseix_Message_Leaderboard_PlayerRankRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.PlayerRankRequest, global::Senseix.Message.Leaderboard.PlayerRankRequest.Builder>(internal__static_Senseix_Message_Leaderboard_PlayerRankRequest__Descriptor,
                new string[] { "PlayerId", "Count", "PageSize", "SortBy", });
        internal__static_Senseix_Message_Leaderboard_PlayerRankResponse__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Senseix_Message_Leaderboard_PlayerRankResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Leaderboard.PlayerRankResponse, global::Senseix.Message.Leaderboard.PlayerRankResponse.Builder>(internal__static_Senseix_Message_Leaderboard_PlayerRankResponse__Descriptor,
                new string[] { "TotalMembers", "Player", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum SortBy {
    RANK = 1,
    SCORE = 2,
    NONE = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MemberData : pb::GeneratedMessage<MemberData, MemberData.Builder> {
    private MemberData() { }
    private static readonly MemberData defaultInstance = new MemberData().MakeReadOnly();
    private static readonly string[] _memberDataFieldNames = new string[] { "player_name" };
    private static readonly uint[] _memberDataFieldTags = new uint[] { 10 };
    public static MemberData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MemberData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MemberData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_MemberData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MemberData, MemberData.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_MemberData__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _memberDataFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[0], PlayerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MemberData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MemberData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MemberData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MemberData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MemberData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MemberData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MemberData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MemberData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MemberData result;
      
      private MemberData PrepareBuilder() {
        if (resultIsReadOnly) {
          MemberData original = result;
          result = new MemberData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MemberData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Leaderboard.MemberData.Descriptor; }
      }
      
      public override MemberData DefaultInstanceForType {
        get { return global::Senseix.Message.Leaderboard.MemberData.DefaultInstance; }
      }
      
      public override MemberData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MemberData) {
          return MergeFrom((MemberData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MemberData other) {
        if (other == global::Senseix.Message.Leaderboard.MemberData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_memberDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _memberDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
    }
    static MemberData() {
      object.ReferenceEquals(global::Senseix.Message.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerData : pb::GeneratedMessage<PlayerData, PlayerData.Builder> {
    private PlayerData() { }
    private static readonly PlayerData defaultInstance = new PlayerData().MakeReadOnly();
    private static readonly string[] _playerDataFieldNames = new string[] { "name", "rank", "score" };
    private static readonly uint[] _playerDataFieldTags = new uint[] { 26, 16, 8 };
    public static PlayerData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_PlayerData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerData, PlayerData.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_PlayerData__FieldAccessorTable; }
    }
    
    public const int ScoreFieldNumber = 1;
    private bool hasScore;
    private uint score_;
    public bool HasScore {
      get { return hasScore; }
    }
    [global::System.CLSCompliant(false)]
    public uint Score {
      get { return score_; }
    }
    
    public const int RankFieldNumber = 2;
    private bool hasRank;
    private uint rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rank {
      get { return rank_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerDataFieldNames;
      if (hasScore) {
        output.WriteUInt32(1, field_names[2], Score);
      }
      if (hasRank) {
        output.WriteUInt32(2, field_names[1], Rank);
      }
      if (hasName) {
        output.WriteString(3, field_names[0], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Score);
        }
        if (hasRank) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Rank);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerData result;
      
      private PlayerData PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerData original = result;
          result = new PlayerData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Leaderboard.PlayerData.Descriptor; }
      }
      
      public override PlayerData DefaultInstanceForType {
        get { return global::Senseix.Message.Leaderboard.PlayerData.DefaultInstance; }
      }
      
      public override PlayerData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerData) {
          return MergeFrom((PlayerData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerData other) {
        if (other == global::Senseix.Message.Leaderboard.PlayerData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasScore = input.ReadUInt32(ref result.score_);
              break;
            }
            case 16: {
              result.hasRank = input.ReadUInt32(ref result.rank_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      [global::System.CLSCompliant(false)]
      public uint Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetScore(uint value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      [global::System.CLSCompliant(false)]
      public uint Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRank(uint value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static PlayerData() {
      object.ReferenceEquals(global::Senseix.Message.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdatePlayerScoreRequest : pb::GeneratedMessage<UpdatePlayerScoreRequest, UpdatePlayerScoreRequest.Builder> {
    private UpdatePlayerScoreRequest() { }
    private static readonly UpdatePlayerScoreRequest defaultInstance = new UpdatePlayerScoreRequest().MakeReadOnly();
    private static readonly string[] _updatePlayerScoreRequestFieldNames = new string[] { "player_id", "player_score" };
    private static readonly uint[] _updatePlayerScoreRequestFieldTags = new uint[] { 10, 16 };
    public static UpdatePlayerScoreRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UpdatePlayerScoreRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UpdatePlayerScoreRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UpdatePlayerScoreRequest, UpdatePlayerScoreRequest.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreRequest__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private string playerId_ = "";
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public string PlayerId {
      get { return playerId_; }
    }
    
    public const int PlayerScoreFieldNumber = 2;
    private bool hasPlayerScore;
    private uint playerScore_;
    public bool HasPlayerScore {
      get { return hasPlayerScore; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayerScore {
      get { return playerScore_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasPlayerScore) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _updatePlayerScoreRequestFieldNames;
      if (hasPlayerId) {
        output.WriteString(1, field_names[0], PlayerId);
      }
      if (hasPlayerScore) {
        output.WriteUInt32(2, field_names[1], PlayerScore);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerId);
        }
        if (hasPlayerScore) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, PlayerScore);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UpdatePlayerScoreRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdatePlayerScoreRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UpdatePlayerScoreRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UpdatePlayerScoreRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UpdatePlayerScoreRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UpdatePlayerScoreRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UpdatePlayerScoreRequest result;
      
      private UpdatePlayerScoreRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UpdatePlayerScoreRequest original = result;
          result = new UpdatePlayerScoreRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UpdatePlayerScoreRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Leaderboard.UpdatePlayerScoreRequest.Descriptor; }
      }
      
      public override UpdatePlayerScoreRequest DefaultInstanceForType {
        get { return global::Senseix.Message.Leaderboard.UpdatePlayerScoreRequest.DefaultInstance; }
      }
      
      public override UpdatePlayerScoreRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UpdatePlayerScoreRequest) {
          return MergeFrom((UpdatePlayerScoreRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UpdatePlayerScoreRequest other) {
        if (other == global::Senseix.Message.Leaderboard.UpdatePlayerScoreRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasPlayerScore) {
          PlayerScore = other.PlayerScore;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_updatePlayerScoreRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _updatePlayerScoreRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerId = input.ReadString(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasPlayerScore = input.ReadUInt32(ref result.playerScore_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public string PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = "";
        return this;
      }
      
      public bool HasPlayerScore {
        get { return result.hasPlayerScore; }
      }
      [global::System.CLSCompliant(false)]
      public uint PlayerScore {
        get { return result.PlayerScore; }
        set { SetPlayerScore(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerScore(uint value) {
        PrepareBuilder();
        result.hasPlayerScore = true;
        result.playerScore_ = value;
        return this;
      }
      public Builder ClearPlayerScore() {
        PrepareBuilder();
        result.hasPlayerScore = false;
        result.playerScore_ = 0;
        return this;
      }
    }
    static UpdatePlayerScoreRequest() {
      object.ReferenceEquals(global::Senseix.Message.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdatePlayerScoreResponse : pb::GeneratedMessage<UpdatePlayerScoreResponse, UpdatePlayerScoreResponse.Builder> {
    private UpdatePlayerScoreResponse() { }
    private static readonly UpdatePlayerScoreResponse defaultInstance = new UpdatePlayerScoreResponse().MakeReadOnly();
    private static readonly string[] _updatePlayerScoreResponseFieldNames = new string[] { "player", "total_members" };
    private static readonly uint[] _updatePlayerScoreResponseFieldTags = new uint[] { 18, 8 };
    public static UpdatePlayerScoreResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UpdatePlayerScoreResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UpdatePlayerScoreResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UpdatePlayerScoreResponse, UpdatePlayerScoreResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_UpdatePlayerScoreResponse__FieldAccessorTable; }
    }
    
    public const int TotalMembersFieldNumber = 1;
    private bool hasTotalMembers;
    private uint totalMembers_;
    public bool HasTotalMembers {
      get { return hasTotalMembers; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalMembers {
      get { return totalMembers_; }
    }
    
    public const int PlayerFieldNumber = 2;
    private bool hasPlayer;
    private global::Senseix.Message.Leaderboard.PlayerData player_;
    public bool HasPlayer {
      get { return hasPlayer; }
    }
    public global::Senseix.Message.Leaderboard.PlayerData Player {
      get { return player_ ?? global::Senseix.Message.Leaderboard.PlayerData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTotalMembers) return false;
        if (!hasPlayer) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _updatePlayerScoreResponseFieldNames;
      if (hasTotalMembers) {
        output.WriteUInt32(1, field_names[1], TotalMembers);
      }
      if (hasPlayer) {
        output.WriteMessage(2, field_names[0], Player);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTotalMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, TotalMembers);
        }
        if (hasPlayer) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Player);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UpdatePlayerScoreResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdatePlayerScoreResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UpdatePlayerScoreResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UpdatePlayerScoreResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UpdatePlayerScoreResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UpdatePlayerScoreResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UpdatePlayerScoreResponse result;
      
      private UpdatePlayerScoreResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          UpdatePlayerScoreResponse original = result;
          result = new UpdatePlayerScoreResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UpdatePlayerScoreResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Leaderboard.UpdatePlayerScoreResponse.Descriptor; }
      }
      
      public override UpdatePlayerScoreResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Leaderboard.UpdatePlayerScoreResponse.DefaultInstance; }
      }
      
      public override UpdatePlayerScoreResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UpdatePlayerScoreResponse) {
          return MergeFrom((UpdatePlayerScoreResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UpdatePlayerScoreResponse other) {
        if (other == global::Senseix.Message.Leaderboard.UpdatePlayerScoreResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTotalMembers) {
          TotalMembers = other.TotalMembers;
        }
        if (other.HasPlayer) {
          MergePlayer(other.Player);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_updatePlayerScoreResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _updatePlayerScoreResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTotalMembers = input.ReadUInt32(ref result.totalMembers_);
              break;
            }
            case 18: {
              global::Senseix.Message.Leaderboard.PlayerData.Builder subBuilder = global::Senseix.Message.Leaderboard.PlayerData.CreateBuilder();
              if (result.hasPlayer) {
                subBuilder.MergeFrom(Player);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTotalMembers {
        get { return result.hasTotalMembers; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalMembers {
        get { return result.TotalMembers; }
        set { SetTotalMembers(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalMembers(uint value) {
        PrepareBuilder();
        result.hasTotalMembers = true;
        result.totalMembers_ = value;
        return this;
      }
      public Builder ClearTotalMembers() {
        PrepareBuilder();
        result.hasTotalMembers = false;
        result.totalMembers_ = 0;
        return this;
      }
      
      public bool HasPlayer {
       get { return result.hasPlayer; }
      }
      public global::Senseix.Message.Leaderboard.PlayerData Player {
        get { return result.Player; }
        set { SetPlayer(value); }
      }
      public Builder SetPlayer(global::Senseix.Message.Leaderboard.PlayerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = value;
        return this;
      }
      public Builder SetPlayer(global::Senseix.Message.Leaderboard.PlayerData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer(global::Senseix.Message.Leaderboard.PlayerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer &&
            result.player_ != global::Senseix.Message.Leaderboard.PlayerData.DefaultInstance) {
            result.player_ = global::Senseix.Message.Leaderboard.PlayerData.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
        } else {
          result.player_ = value;
        }
        result.hasPlayer = true;
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.hasPlayer = false;
        result.player_ = null;
        return this;
      }
    }
    static UpdatePlayerScoreResponse() {
      object.ReferenceEquals(global::Senseix.Message.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerRankRequest : pb::GeneratedMessage<PlayerRankRequest, PlayerRankRequest.Builder> {
    private PlayerRankRequest() { }
    private static readonly PlayerRankRequest defaultInstance = new PlayerRankRequest().MakeReadOnly();
    private static readonly string[] _playerRankRequestFieldNames = new string[] { "count", "page_size", "player_id", "sort_by" };
    private static readonly uint[] _playerRankRequestFieldTags = new uint[] { 16, 24, 10, 32 };
    public static PlayerRankRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerRankRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerRankRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_PlayerRankRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerRankRequest, PlayerRankRequest.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_PlayerRankRequest__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private string playerId_ = "";
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public string PlayerId {
      get { return playerId_; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private uint count_;
    public bool HasCount {
      get { return hasCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint Count {
      get { return count_; }
    }
    
    public const int PageSizeFieldNumber = 3;
    private bool hasPageSize;
    private uint pageSize_;
    public bool HasPageSize {
      get { return hasPageSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint PageSize {
      get { return pageSize_; }
    }
    
    public const int SortByFieldNumber = 4;
    private bool hasSortBy;
    private global::Senseix.Message.Leaderboard.SortBy sortBy_ = global::Senseix.Message.Leaderboard.SortBy.NONE;
    public bool HasSortBy {
      get { return hasSortBy; }
    }
    public global::Senseix.Message.Leaderboard.SortBy SortBy {
      get { return sortBy_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerRankRequestFieldNames;
      if (hasPlayerId) {
        output.WriteString(1, field_names[2], PlayerId);
      }
      if (hasCount) {
        output.WriteUInt32(2, field_names[0], Count);
      }
      if (hasPageSize) {
        output.WriteUInt32(3, field_names[1], PageSize);
      }
      if (hasSortBy) {
        output.WriteEnum(4, field_names[3], (int) SortBy, SortBy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerId);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Count);
        }
        if (hasPageSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, PageSize);
        }
        if (hasSortBy) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) SortBy);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerRankRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerRankRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerRankRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerRankRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerRankRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerRankRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerRankRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerRankRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerRankRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerRankRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerRankRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerRankRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerRankRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerRankRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerRankRequest result;
      
      private PlayerRankRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerRankRequest original = result;
          result = new PlayerRankRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerRankRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Leaderboard.PlayerRankRequest.Descriptor; }
      }
      
      public override PlayerRankRequest DefaultInstanceForType {
        get { return global::Senseix.Message.Leaderboard.PlayerRankRequest.DefaultInstance; }
      }
      
      public override PlayerRankRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerRankRequest) {
          return MergeFrom((PlayerRankRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerRankRequest other) {
        if (other == global::Senseix.Message.Leaderboard.PlayerRankRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.HasPageSize) {
          PageSize = other.PageSize;
        }
        if (other.HasSortBy) {
          SortBy = other.SortBy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerRankRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerRankRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerId = input.ReadString(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasCount = input.ReadUInt32(ref result.count_);
              break;
            }
            case 24: {
              result.hasPageSize = input.ReadUInt32(ref result.pageSize_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.sortBy_, out unknown)) {
                result.hasSortBy = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public string PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = "";
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCount(uint value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public bool HasPageSize {
        get { return result.hasPageSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint PageSize {
        get { return result.PageSize; }
        set { SetPageSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPageSize(uint value) {
        PrepareBuilder();
        result.hasPageSize = true;
        result.pageSize_ = value;
        return this;
      }
      public Builder ClearPageSize() {
        PrepareBuilder();
        result.hasPageSize = false;
        result.pageSize_ = 0;
        return this;
      }
      
      public bool HasSortBy {
       get { return result.hasSortBy; }
      }
      public global::Senseix.Message.Leaderboard.SortBy SortBy {
        get { return result.SortBy; }
        set { SetSortBy(value); }
      }
      public Builder SetSortBy(global::Senseix.Message.Leaderboard.SortBy value) {
        PrepareBuilder();
        result.hasSortBy = true;
        result.sortBy_ = value;
        return this;
      }
      public Builder ClearSortBy() {
        PrepareBuilder();
        result.hasSortBy = false;
        result.sortBy_ = global::Senseix.Message.Leaderboard.SortBy.NONE;
        return this;
      }
    }
    static PlayerRankRequest() {
      object.ReferenceEquals(global::Senseix.Message.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerRankResponse : pb::GeneratedMessage<PlayerRankResponse, PlayerRankResponse.Builder> {
    private PlayerRankResponse() { }
    private static readonly PlayerRankResponse defaultInstance = new PlayerRankResponse().MakeReadOnly();
    private static readonly string[] _playerRankResponseFieldNames = new string[] { "player", "total_members" };
    private static readonly uint[] _playerRankResponseFieldTags = new uint[] { 18, 8 };
    public static PlayerRankResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerRankResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerRankResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_PlayerRankResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerRankResponse, PlayerRankResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Leaderboard.Leaderboard.internal__static_Senseix_Message_Leaderboard_PlayerRankResponse__FieldAccessorTable; }
    }
    
    public const int TotalMembersFieldNumber = 1;
    private bool hasTotalMembers;
    private uint totalMembers_;
    public bool HasTotalMembers {
      get { return hasTotalMembers; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalMembers {
      get { return totalMembers_; }
    }
    
    public const int PlayerFieldNumber = 2;
    private pbc::PopsicleList<global::Senseix.Message.Leaderboard.PlayerData> player_ = new pbc::PopsicleList<global::Senseix.Message.Leaderboard.PlayerData>();
    public scg::IList<global::Senseix.Message.Leaderboard.PlayerData> PlayerList {
      get { return player_; }
    }
    public int PlayerCount {
      get { return player_.Count; }
    }
    public global::Senseix.Message.Leaderboard.PlayerData GetPlayer(int index) {
      return player_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTotalMembers) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerRankResponseFieldNames;
      if (hasTotalMembers) {
        output.WriteUInt32(1, field_names[1], TotalMembers);
      }
      if (player_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], player_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTotalMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, TotalMembers);
        }
        foreach (global::Senseix.Message.Leaderboard.PlayerData element in PlayerList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerRankResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerRankResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerRankResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerRankResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerRankResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerRankResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerRankResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerRankResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerRankResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerRankResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerRankResponse MakeReadOnly() {
      player_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerRankResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerRankResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerRankResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerRankResponse result;
      
      private PlayerRankResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerRankResponse original = result;
          result = new PlayerRankResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerRankResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Leaderboard.PlayerRankResponse.Descriptor; }
      }
      
      public override PlayerRankResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Leaderboard.PlayerRankResponse.DefaultInstance; }
      }
      
      public override PlayerRankResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerRankResponse) {
          return MergeFrom((PlayerRankResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerRankResponse other) {
        if (other == global::Senseix.Message.Leaderboard.PlayerRankResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTotalMembers) {
          TotalMembers = other.TotalMembers;
        }
        if (other.player_.Count != 0) {
          result.player_.Add(other.player_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerRankResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerRankResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTotalMembers = input.ReadUInt32(ref result.totalMembers_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.player_, global::Senseix.Message.Leaderboard.PlayerData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTotalMembers {
        get { return result.hasTotalMembers; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalMembers {
        get { return result.TotalMembers; }
        set { SetTotalMembers(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalMembers(uint value) {
        PrepareBuilder();
        result.hasTotalMembers = true;
        result.totalMembers_ = value;
        return this;
      }
      public Builder ClearTotalMembers() {
        PrepareBuilder();
        result.hasTotalMembers = false;
        result.totalMembers_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Senseix.Message.Leaderboard.PlayerData> PlayerList {
        get { return PrepareBuilder().player_; }
      }
      public int PlayerCount {
        get { return result.PlayerCount; }
      }
      public global::Senseix.Message.Leaderboard.PlayerData GetPlayer(int index) {
        return result.GetPlayer(index);
      }
      public Builder SetPlayer(int index, global::Senseix.Message.Leaderboard.PlayerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.player_[index] = value;
        return this;
      }
      public Builder SetPlayer(int index, global::Senseix.Message.Leaderboard.PlayerData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.player_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlayer(global::Senseix.Message.Leaderboard.PlayerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.player_.Add(value);
        return this;
      }
      public Builder AddPlayer(global::Senseix.Message.Leaderboard.PlayerData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.player_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlayer(scg::IEnumerable<global::Senseix.Message.Leaderboard.PlayerData> values) {
        PrepareBuilder();
        result.player_.Add(values);
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.player_.Clear();
        return this;
      }
    }
    static PlayerRankResponse() {
      object.ReferenceEquals(global::Senseix.Message.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
