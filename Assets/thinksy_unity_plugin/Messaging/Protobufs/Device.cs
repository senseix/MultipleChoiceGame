// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Senseix.Message.Device {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Device {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Device_DeviceRegistrationRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.DeviceRegistrationRequest, global::Senseix.Message.Device.DeviceRegistrationRequest.Builder> internal__static_Senseix_Message_Device_DeviceRegistrationRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Device_DeviceRegistrationResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.DeviceRegistrationResponse, global::Senseix.Message.Device.DeviceRegistrationResponse.Builder> internal__static_Senseix_Message_Device_DeviceRegistrationResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Device_GameVerificationRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.GameVerificationRequest, global::Senseix.Message.Device.GameVerificationRequest.Builder> internal__static_Senseix_Message_Device_GameVerificationRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Device_GameVerificationResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.GameVerificationResponse, global::Senseix.Message.Device.GameVerificationResponse.Builder> internal__static_Senseix_Message_Device_GameVerificationResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Device() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxEZXZpY2UucHJvdG8SFlNlbnNlaXguTWVzc2FnZS5EZXZpY2UiQwoZRGV2" + 
          "aWNlUmVnaXN0cmF0aW9uUmVxdWVzdBIRCglkZXZpY2VfaWQYASACKAkSEwoL" + 
          "aW5mb3JtYXRpb24YAiACKAkiYQoaRGV2aWNlUmVnaXN0cmF0aW9uUmVzcG9u" + 
          "c2USEQoJcGxheWVyX2lkGAEgAigJEhwKFGlzX3RlbXBvcmFyeV9hY2NvdW50" + 
          "GAIgAigIEhIKCmF1dGhfdG9rZW4YAyABKAkiQwoXR2FtZVZlcmlmaWNhdGlv" + 
          "blJlcXVlc3QSDAoEdWRpZBgBIAIoCRIaChJ2ZXJpZmljYXRpb25fdG9rZW4Y" + 
          "AiACKAkiGgoYR2FtZVZlcmlmaWNhdGlvblJlc3BvbnNl");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Senseix_Message_Device_DeviceRegistrationRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Senseix_Message_Device_DeviceRegistrationRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.DeviceRegistrationRequest, global::Senseix.Message.Device.DeviceRegistrationRequest.Builder>(internal__static_Senseix_Message_Device_DeviceRegistrationRequest__Descriptor,
                new string[] { "DeviceId", "Information", });
        internal__static_Senseix_Message_Device_DeviceRegistrationResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Senseix_Message_Device_DeviceRegistrationResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.DeviceRegistrationResponse, global::Senseix.Message.Device.DeviceRegistrationResponse.Builder>(internal__static_Senseix_Message_Device_DeviceRegistrationResponse__Descriptor,
                new string[] { "PlayerId", "IsTemporaryAccount", "AuthToken", });
        internal__static_Senseix_Message_Device_GameVerificationRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Senseix_Message_Device_GameVerificationRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.GameVerificationRequest, global::Senseix.Message.Device.GameVerificationRequest.Builder>(internal__static_Senseix_Message_Device_GameVerificationRequest__Descriptor,
                new string[] { "Udid", "VerificationToken", });
        internal__static_Senseix_Message_Device_GameVerificationResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Senseix_Message_Device_GameVerificationResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Device.GameVerificationResponse, global::Senseix.Message.Device.GameVerificationResponse.Builder>(internal__static_Senseix_Message_Device_GameVerificationResponse__Descriptor,
                new string[] { });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceRegistrationRequest : pb::GeneratedMessage<DeviceRegistrationRequest, DeviceRegistrationRequest.Builder> {
    private DeviceRegistrationRequest() { }
    private static readonly DeviceRegistrationRequest defaultInstance = new DeviceRegistrationRequest().MakeReadOnly();
    private static readonly string[] _deviceRegistrationRequestFieldNames = new string[] { "device_id", "information" };
    private static readonly uint[] _deviceRegistrationRequestFieldTags = new uint[] { 10, 18 };
    public static DeviceRegistrationRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceRegistrationRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceRegistrationRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_DeviceRegistrationRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceRegistrationRequest, DeviceRegistrationRequest.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_DeviceRegistrationRequest__FieldAccessorTable; }
    }
    
    public const int DeviceIdFieldNumber = 1;
    private bool hasDeviceId;
    private string deviceId_ = "";
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    public string DeviceId {
      get { return deviceId_; }
    }
    
    public const int InformationFieldNumber = 2;
    private bool hasInformation;
    private string information_ = "";
    public bool HasInformation {
      get { return hasInformation; }
    }
    public string Information {
      get { return information_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDeviceId) return false;
        if (!hasInformation) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceRegistrationRequestFieldNames;
      if (hasDeviceId) {
        output.WriteString(1, field_names[0], DeviceId);
      }
      if (hasInformation) {
        output.WriteString(2, field_names[1], Information);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, DeviceId);
        }
        if (hasInformation) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Information);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceRegistrationRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceRegistrationRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceRegistrationRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceRegistrationRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceRegistrationRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceRegistrationRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceRegistrationRequest result;
      
      private DeviceRegistrationRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceRegistrationRequest original = result;
          result = new DeviceRegistrationRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceRegistrationRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Device.DeviceRegistrationRequest.Descriptor; }
      }
      
      public override DeviceRegistrationRequest DefaultInstanceForType {
        get { return global::Senseix.Message.Device.DeviceRegistrationRequest.DefaultInstance; }
      }
      
      public override DeviceRegistrationRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceRegistrationRequest) {
          return MergeFrom((DeviceRegistrationRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceRegistrationRequest other) {
        if (other == global::Senseix.Message.Device.DeviceRegistrationRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasInformation) {
          Information = other.Information;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceRegistrationRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceRegistrationRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDeviceId = input.ReadString(ref result.deviceId_);
              break;
            }
            case 18: {
              result.hasInformation = input.ReadString(ref result.information_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceId {
        get { return result.hasDeviceId; }
      }
      public string DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      public Builder SetDeviceId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        PrepareBuilder();
        result.hasDeviceId = false;
        result.deviceId_ = "";
        return this;
      }
      
      public bool HasInformation {
        get { return result.hasInformation; }
      }
      public string Information {
        get { return result.Information; }
        set { SetInformation(value); }
      }
      public Builder SetInformation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInformation = true;
        result.information_ = value;
        return this;
      }
      public Builder ClearInformation() {
        PrepareBuilder();
        result.hasInformation = false;
        result.information_ = "";
        return this;
      }
    }
    static DeviceRegistrationRequest() {
      object.ReferenceEquals(global::Senseix.Message.Device.Device.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceRegistrationResponse : pb::GeneratedMessage<DeviceRegistrationResponse, DeviceRegistrationResponse.Builder> {
    private DeviceRegistrationResponse() { }
    private static readonly DeviceRegistrationResponse defaultInstance = new DeviceRegistrationResponse().MakeReadOnly();
    private static readonly string[] _deviceRegistrationResponseFieldNames = new string[] { "auth_token", "is_temporary_account", "player_id" };
    private static readonly uint[] _deviceRegistrationResponseFieldTags = new uint[] { 26, 16, 10 };
    public static DeviceRegistrationResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceRegistrationResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceRegistrationResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_DeviceRegistrationResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceRegistrationResponse, DeviceRegistrationResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_DeviceRegistrationResponse__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private string playerId_ = "";
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public string PlayerId {
      get { return playerId_; }
    }
    
    public const int IsTemporaryAccountFieldNumber = 2;
    private bool hasIsTemporaryAccount;
    private bool isTemporaryAccount_;
    public bool HasIsTemporaryAccount {
      get { return hasIsTemporaryAccount; }
    }
    public bool IsTemporaryAccount {
      get { return isTemporaryAccount_; }
    }
    
    public const int AuthTokenFieldNumber = 3;
    private bool hasAuthToken;
    private string authToken_ = "";
    public bool HasAuthToken {
      get { return hasAuthToken; }
    }
    public string AuthToken {
      get { return authToken_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasIsTemporaryAccount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceRegistrationResponseFieldNames;
      if (hasPlayerId) {
        output.WriteString(1, field_names[2], PlayerId);
      }
      if (hasIsTemporaryAccount) {
        output.WriteBool(2, field_names[1], IsTemporaryAccount);
      }
      if (hasAuthToken) {
        output.WriteString(3, field_names[0], AuthToken);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerId);
        }
        if (hasIsTemporaryAccount) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsTemporaryAccount);
        }
        if (hasAuthToken) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AuthToken);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceRegistrationResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceRegistrationResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceRegistrationResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceRegistrationResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceRegistrationResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceRegistrationResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceRegistrationResponse result;
      
      private DeviceRegistrationResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceRegistrationResponse original = result;
          result = new DeviceRegistrationResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceRegistrationResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Device.DeviceRegistrationResponse.Descriptor; }
      }
      
      public override DeviceRegistrationResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Device.DeviceRegistrationResponse.DefaultInstance; }
      }
      
      public override DeviceRegistrationResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceRegistrationResponse) {
          return MergeFrom((DeviceRegistrationResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceRegistrationResponse other) {
        if (other == global::Senseix.Message.Device.DeviceRegistrationResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasIsTemporaryAccount) {
          IsTemporaryAccount = other.IsTemporaryAccount;
        }
        if (other.HasAuthToken) {
          AuthToken = other.AuthToken;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceRegistrationResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceRegistrationResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerId = input.ReadString(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasIsTemporaryAccount = input.ReadBool(ref result.isTemporaryAccount_);
              break;
            }
            case 26: {
              result.hasAuthToken = input.ReadString(ref result.authToken_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public string PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = "";
        return this;
      }
      
      public bool HasIsTemporaryAccount {
        get { return result.hasIsTemporaryAccount; }
      }
      public bool IsTemporaryAccount {
        get { return result.IsTemporaryAccount; }
        set { SetIsTemporaryAccount(value); }
      }
      public Builder SetIsTemporaryAccount(bool value) {
        PrepareBuilder();
        result.hasIsTemporaryAccount = true;
        result.isTemporaryAccount_ = value;
        return this;
      }
      public Builder ClearIsTemporaryAccount() {
        PrepareBuilder();
        result.hasIsTemporaryAccount = false;
        result.isTemporaryAccount_ = false;
        return this;
      }
      
      public bool HasAuthToken {
        get { return result.hasAuthToken; }
      }
      public string AuthToken {
        get { return result.AuthToken; }
        set { SetAuthToken(value); }
      }
      public Builder SetAuthToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthToken = true;
        result.authToken_ = value;
        return this;
      }
      public Builder ClearAuthToken() {
        PrepareBuilder();
        result.hasAuthToken = false;
        result.authToken_ = "";
        return this;
      }
    }
    static DeviceRegistrationResponse() {
      object.ReferenceEquals(global::Senseix.Message.Device.Device.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameVerificationRequest : pb::GeneratedMessage<GameVerificationRequest, GameVerificationRequest.Builder> {
    private GameVerificationRequest() { }
    private static readonly GameVerificationRequest defaultInstance = new GameVerificationRequest().MakeReadOnly();
    private static readonly string[] _gameVerificationRequestFieldNames = new string[] { "udid", "verification_token" };
    private static readonly uint[] _gameVerificationRequestFieldTags = new uint[] { 10, 18 };
    public static GameVerificationRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameVerificationRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameVerificationRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_GameVerificationRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameVerificationRequest, GameVerificationRequest.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_GameVerificationRequest__FieldAccessorTable; }
    }
    
    public const int UdidFieldNumber = 1;
    private bool hasUdid;
    private string udid_ = "";
    public bool HasUdid {
      get { return hasUdid; }
    }
    public string Udid {
      get { return udid_; }
    }
    
    public const int VerificationTokenFieldNumber = 2;
    private bool hasVerificationToken;
    private string verificationToken_ = "";
    public bool HasVerificationToken {
      get { return hasVerificationToken; }
    }
    public string VerificationToken {
      get { return verificationToken_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUdid) return false;
        if (!hasVerificationToken) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameVerificationRequestFieldNames;
      if (hasUdid) {
        output.WriteString(1, field_names[0], Udid);
      }
      if (hasVerificationToken) {
        output.WriteString(2, field_names[1], VerificationToken);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUdid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Udid);
        }
        if (hasVerificationToken) {
          size += pb::CodedOutputStream.ComputeStringSize(2, VerificationToken);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameVerificationRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVerificationRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVerificationRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVerificationRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVerificationRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVerificationRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameVerificationRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameVerificationRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameVerificationRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVerificationRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameVerificationRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameVerificationRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameVerificationRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameVerificationRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameVerificationRequest result;
      
      private GameVerificationRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GameVerificationRequest original = result;
          result = new GameVerificationRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameVerificationRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Device.GameVerificationRequest.Descriptor; }
      }
      
      public override GameVerificationRequest DefaultInstanceForType {
        get { return global::Senseix.Message.Device.GameVerificationRequest.DefaultInstance; }
      }
      
      public override GameVerificationRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameVerificationRequest) {
          return MergeFrom((GameVerificationRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameVerificationRequest other) {
        if (other == global::Senseix.Message.Device.GameVerificationRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUdid) {
          Udid = other.Udid;
        }
        if (other.HasVerificationToken) {
          VerificationToken = other.VerificationToken;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameVerificationRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameVerificationRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUdid = input.ReadString(ref result.udid_);
              break;
            }
            case 18: {
              result.hasVerificationToken = input.ReadString(ref result.verificationToken_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUdid {
        get { return result.hasUdid; }
      }
      public string Udid {
        get { return result.Udid; }
        set { SetUdid(value); }
      }
      public Builder SetUdid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUdid = true;
        result.udid_ = value;
        return this;
      }
      public Builder ClearUdid() {
        PrepareBuilder();
        result.hasUdid = false;
        result.udid_ = "";
        return this;
      }
      
      public bool HasVerificationToken {
        get { return result.hasVerificationToken; }
      }
      public string VerificationToken {
        get { return result.VerificationToken; }
        set { SetVerificationToken(value); }
      }
      public Builder SetVerificationToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerificationToken = true;
        result.verificationToken_ = value;
        return this;
      }
      public Builder ClearVerificationToken() {
        PrepareBuilder();
        result.hasVerificationToken = false;
        result.verificationToken_ = "";
        return this;
      }
    }
    static GameVerificationRequest() {
      object.ReferenceEquals(global::Senseix.Message.Device.Device.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameVerificationResponse : pb::GeneratedMessage<GameVerificationResponse, GameVerificationResponse.Builder> {
    private GameVerificationResponse() { }
    private static readonly GameVerificationResponse defaultInstance = new GameVerificationResponse().MakeReadOnly();
    private static readonly string[] _gameVerificationResponseFieldNames = new string[] {  };
    private static readonly uint[] _gameVerificationResponseFieldTags = new uint[] {  };
    public static GameVerificationResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameVerificationResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameVerificationResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_GameVerificationResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameVerificationResponse, GameVerificationResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Device.Device.internal__static_Senseix_Message_Device_GameVerificationResponse__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameVerificationResponseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameVerificationResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVerificationResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVerificationResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVerificationResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVerificationResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVerificationResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameVerificationResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameVerificationResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameVerificationResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVerificationResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameVerificationResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameVerificationResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameVerificationResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameVerificationResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameVerificationResponse result;
      
      private GameVerificationResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GameVerificationResponse original = result;
          result = new GameVerificationResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameVerificationResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Device.GameVerificationResponse.Descriptor; }
      }
      
      public override GameVerificationResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Device.GameVerificationResponse.DefaultInstance; }
      }
      
      public override GameVerificationResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameVerificationResponse) {
          return MergeFrom((GameVerificationResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameVerificationResponse other) {
        if (other == global::Senseix.Message.Device.GameVerificationResponse.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameVerificationResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameVerificationResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GameVerificationResponse() {
      object.ReferenceEquals(global::Senseix.Message.Device.Device.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
