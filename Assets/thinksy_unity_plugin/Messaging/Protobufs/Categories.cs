// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Senseix.Message.Categories {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Categories {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Categories_StatisticsData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.StatisticsData, global::Senseix.Message.Categories.StatisticsData.Builder> internal__static_Senseix_Message_Categories_StatisticsData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Categories_TimeSeriesStatsData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.TimeSeriesStatsData, global::Senseix.Message.Categories.TimeSeriesStatsData.Builder> internal__static_Senseix_Message_Categories_TimeSeriesStatsData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Categories_StatisticsGetResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.StatisticsGetResponse, global::Senseix.Message.Categories.StatisticsGetResponse.Builder> internal__static_Senseix_Message_Categories_StatisticsGetResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Categories_CategoriesGetResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.CategoriesGetResponse, global::Senseix.Message.Categories.CategoriesGetResponse.Builder> internal__static_Senseix_Message_Categories_CategoriesGetResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Categories_TimeSeriesGetResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.TimeSeriesGetResponse, global::Senseix.Message.Categories.TimeSeriesGetResponse.Builder> internal__static_Senseix_Message_Categories_TimeSeriesGetResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Categories() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBDYXRlZ29yaWVzLnByb3RvEhpTZW5zZWl4Lk1lc3NhZ2UuQ2F0ZWdvcmll" + 
          "cyJtCg5TdGF0aXN0aWNzRGF0YRITCgt0aW1lX3BsYXllZBgBIAIoDRISCgpw" + 
          "ZXJjZW50YWdlGAIgAigNEg8KB2NvcnJlY3QYAyACKA0SEAoIYW5zd2VyZWQY" + 
          "BCACKA0SDwoHbWFzdGVyeRgFIAIoDSJdChNUaW1lU2VyaWVzU3RhdHNEYXRh" + 
          "EgsKA2RheRgBIAIoCRI5CgVzdGF0cxgCIAIoCzIqLlNlbnNlaXguTWVzc2Fn" + 
          "ZS5DYXRlZ29yaWVzLlN0YXRpc3RpY3NEYXRhIpoBChVTdGF0aXN0aWNzR2V0" + 
          "UmVzcG9uc2USCgoCaWQYASACKAkSDAoEbmFtZRgCIAIoCRITCgtkZXNjcmlw" + 
          "dGlvbhgDIAIoCRISCgpwYXJlbnRfaWRzGAQgAygJEj4KCnN0YXRpc3RpY3MY" + 
          "BSACKAsyKi5TZW5zZWl4Lk1lc3NhZ2UuQ2F0ZWdvcmllcy5TdGF0aXN0aWNz" + 
          "RGF0YSItChVDYXRlZ29yaWVzR2V0UmVzcG9uc2USFAoMY2F0ZWdvcnlfaWRz" + 
          "GAEgAygJIocBChVUaW1lU2VyaWVzR2V0UmVzcG9uc2USCgoCaWQYASACKAkS" + 
          "DAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAIoCRI/CgZzZXJpZXMY" + 
          "BCADKAsyLy5TZW5zZWl4Lk1lc3NhZ2UuQ2F0ZWdvcmllcy5UaW1lU2VyaWVz" + 
          "U3RhdHNEYXRh");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Senseix_Message_Categories_StatisticsData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Senseix_Message_Categories_StatisticsData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.StatisticsData, global::Senseix.Message.Categories.StatisticsData.Builder>(internal__static_Senseix_Message_Categories_StatisticsData__Descriptor,
                new string[] { "TimePlayed", "Percentage", "Correct", "Answered", "Mastery", });
        internal__static_Senseix_Message_Categories_TimeSeriesStatsData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Senseix_Message_Categories_TimeSeriesStatsData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.TimeSeriesStatsData, global::Senseix.Message.Categories.TimeSeriesStatsData.Builder>(internal__static_Senseix_Message_Categories_TimeSeriesStatsData__Descriptor,
                new string[] { "Day", "Stats", });
        internal__static_Senseix_Message_Categories_StatisticsGetResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Senseix_Message_Categories_StatisticsGetResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.StatisticsGetResponse, global::Senseix.Message.Categories.StatisticsGetResponse.Builder>(internal__static_Senseix_Message_Categories_StatisticsGetResponse__Descriptor,
                new string[] { "Id", "Name", "Description", "ParentIds", "Statistics", });
        internal__static_Senseix_Message_Categories_CategoriesGetResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Senseix_Message_Categories_CategoriesGetResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.CategoriesGetResponse, global::Senseix.Message.Categories.CategoriesGetResponse.Builder>(internal__static_Senseix_Message_Categories_CategoriesGetResponse__Descriptor,
                new string[] { "CategoryIds", });
        internal__static_Senseix_Message_Categories_TimeSeriesGetResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Senseix_Message_Categories_TimeSeriesGetResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Categories.TimeSeriesGetResponse, global::Senseix.Message.Categories.TimeSeriesGetResponse.Builder>(internal__static_Senseix_Message_Categories_TimeSeriesGetResponse__Descriptor,
                new string[] { "Id", "Name", "Description", "Series", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StatisticsData : pb::GeneratedMessage<StatisticsData, StatisticsData.Builder> {
    private StatisticsData() { }
    private static readonly StatisticsData defaultInstance = new StatisticsData().MakeReadOnly();
    private static readonly string[] _statisticsDataFieldNames = new string[] { "answered", "correct", "mastery", "percentage", "time_played" };
    private static readonly uint[] _statisticsDataFieldTags = new uint[] { 32, 24, 40, 16, 8 };
    public static StatisticsData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StatisticsData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StatisticsData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_StatisticsData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StatisticsData, StatisticsData.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_StatisticsData__FieldAccessorTable; }
    }
    
    public const int TimePlayedFieldNumber = 1;
    private bool hasTimePlayed;
    private uint timePlayed_;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public const int PercentageFieldNumber = 2;
    private bool hasPercentage;
    private uint percentage_;
    public bool HasPercentage {
      get { return hasPercentage; }
    }
    [global::System.CLSCompliant(false)]
    public uint Percentage {
      get { return percentage_; }
    }
    
    public const int CorrectFieldNumber = 3;
    private bool hasCorrect;
    private uint correct_;
    public bool HasCorrect {
      get { return hasCorrect; }
    }
    [global::System.CLSCompliant(false)]
    public uint Correct {
      get { return correct_; }
    }
    
    public const int AnsweredFieldNumber = 4;
    private bool hasAnswered;
    private uint answered_;
    public bool HasAnswered {
      get { return hasAnswered; }
    }
    [global::System.CLSCompliant(false)]
    public uint Answered {
      get { return answered_; }
    }
    
    public const int MasteryFieldNumber = 5;
    private bool hasMastery;
    private uint mastery_;
    public bool HasMastery {
      get { return hasMastery; }
    }
    [global::System.CLSCompliant(false)]
    public uint Mastery {
      get { return mastery_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimePlayed) return false;
        if (!hasPercentage) return false;
        if (!hasCorrect) return false;
        if (!hasAnswered) return false;
        if (!hasMastery) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _statisticsDataFieldNames;
      if (hasTimePlayed) {
        output.WriteUInt32(1, field_names[4], TimePlayed);
      }
      if (hasPercentage) {
        output.WriteUInt32(2, field_names[3], Percentage);
      }
      if (hasCorrect) {
        output.WriteUInt32(3, field_names[1], Correct);
      }
      if (hasAnswered) {
        output.WriteUInt32(4, field_names[0], Answered);
      }
      if (hasMastery) {
        output.WriteUInt32(5, field_names[2], Mastery);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, TimePlayed);
        }
        if (hasPercentage) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Percentage);
        }
        if (hasCorrect) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Correct);
        }
        if (hasAnswered) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Answered);
        }
        if (hasMastery) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Mastery);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StatisticsData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatisticsData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatisticsData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatisticsData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatisticsData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatisticsData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StatisticsData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StatisticsData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StatisticsData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatisticsData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StatisticsData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StatisticsData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StatisticsData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StatisticsData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StatisticsData result;
      
      private StatisticsData PrepareBuilder() {
        if (resultIsReadOnly) {
          StatisticsData original = result;
          result = new StatisticsData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StatisticsData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Categories.StatisticsData.Descriptor; }
      }
      
      public override StatisticsData DefaultInstanceForType {
        get { return global::Senseix.Message.Categories.StatisticsData.DefaultInstance; }
      }
      
      public override StatisticsData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StatisticsData) {
          return MergeFrom((StatisticsData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StatisticsData other) {
        if (other == global::Senseix.Message.Categories.StatisticsData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        if (other.HasPercentage) {
          Percentage = other.Percentage;
        }
        if (other.HasCorrect) {
          Correct = other.Correct;
        }
        if (other.HasAnswered) {
          Answered = other.Answered;
        }
        if (other.HasMastery) {
          Mastery = other.Mastery;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_statisticsDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _statisticsDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimePlayed = input.ReadUInt32(ref result.timePlayed_);
              break;
            }
            case 16: {
              result.hasPercentage = input.ReadUInt32(ref result.percentage_);
              break;
            }
            case 24: {
              result.hasCorrect = input.ReadUInt32(ref result.correct_);
              break;
            }
            case 32: {
              result.hasAnswered = input.ReadUInt32(ref result.answered_);
              break;
            }
            case 40: {
              result.hasMastery = input.ReadUInt32(ref result.mastery_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimePlayed {
        get { return result.hasTimePlayed; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimePlayed(uint value) {
        PrepareBuilder();
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        PrepareBuilder();
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      public bool HasPercentage {
        get { return result.hasPercentage; }
      }
      [global::System.CLSCompliant(false)]
      public uint Percentage {
        get { return result.Percentage; }
        set { SetPercentage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPercentage(uint value) {
        PrepareBuilder();
        result.hasPercentage = true;
        result.percentage_ = value;
        return this;
      }
      public Builder ClearPercentage() {
        PrepareBuilder();
        result.hasPercentage = false;
        result.percentage_ = 0;
        return this;
      }
      
      public bool HasCorrect {
        get { return result.hasCorrect; }
      }
      [global::System.CLSCompliant(false)]
      public uint Correct {
        get { return result.Correct; }
        set { SetCorrect(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCorrect(uint value) {
        PrepareBuilder();
        result.hasCorrect = true;
        result.correct_ = value;
        return this;
      }
      public Builder ClearCorrect() {
        PrepareBuilder();
        result.hasCorrect = false;
        result.correct_ = 0;
        return this;
      }
      
      public bool HasAnswered {
        get { return result.hasAnswered; }
      }
      [global::System.CLSCompliant(false)]
      public uint Answered {
        get { return result.Answered; }
        set { SetAnswered(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAnswered(uint value) {
        PrepareBuilder();
        result.hasAnswered = true;
        result.answered_ = value;
        return this;
      }
      public Builder ClearAnswered() {
        PrepareBuilder();
        result.hasAnswered = false;
        result.answered_ = 0;
        return this;
      }
      
      public bool HasMastery {
        get { return result.hasMastery; }
      }
      [global::System.CLSCompliant(false)]
      public uint Mastery {
        get { return result.Mastery; }
        set { SetMastery(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMastery(uint value) {
        PrepareBuilder();
        result.hasMastery = true;
        result.mastery_ = value;
        return this;
      }
      public Builder ClearMastery() {
        PrepareBuilder();
        result.hasMastery = false;
        result.mastery_ = 0;
        return this;
      }
    }
    static StatisticsData() {
      object.ReferenceEquals(global::Senseix.Message.Categories.Categories.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TimeSeriesStatsData : pb::GeneratedMessage<TimeSeriesStatsData, TimeSeriesStatsData.Builder> {
    private TimeSeriesStatsData() { }
    private static readonly TimeSeriesStatsData defaultInstance = new TimeSeriesStatsData().MakeReadOnly();
    private static readonly string[] _timeSeriesStatsDataFieldNames = new string[] { "day", "stats" };
    private static readonly uint[] _timeSeriesStatsDataFieldTags = new uint[] { 10, 18 };
    public static TimeSeriesStatsData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TimeSeriesStatsData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TimeSeriesStatsData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_TimeSeriesStatsData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TimeSeriesStatsData, TimeSeriesStatsData.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_TimeSeriesStatsData__FieldAccessorTable; }
    }
    
    public const int DayFieldNumber = 1;
    private bool hasDay;
    private string day_ = "";
    public bool HasDay {
      get { return hasDay; }
    }
    public string Day {
      get { return day_; }
    }
    
    public const int StatsFieldNumber = 2;
    private bool hasStats;
    private global::Senseix.Message.Categories.StatisticsData stats_;
    public bool HasStats {
      get { return hasStats; }
    }
    public global::Senseix.Message.Categories.StatisticsData Stats {
      get { return stats_ ?? global::Senseix.Message.Categories.StatisticsData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDay) return false;
        if (!hasStats) return false;
        if (!Stats.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _timeSeriesStatsDataFieldNames;
      if (hasDay) {
        output.WriteString(1, field_names[0], Day);
      }
      if (hasStats) {
        output.WriteMessage(2, field_names[1], Stats);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDay) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Day);
        }
        if (hasStats) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Stats);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TimeSeriesStatsData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TimeSeriesStatsData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TimeSeriesStatsData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TimeSeriesStatsData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TimeSeriesStatsData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TimeSeriesStatsData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TimeSeriesStatsData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TimeSeriesStatsData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TimeSeriesStatsData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TimeSeriesStatsData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TimeSeriesStatsData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TimeSeriesStatsData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TimeSeriesStatsData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TimeSeriesStatsData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TimeSeriesStatsData result;
      
      private TimeSeriesStatsData PrepareBuilder() {
        if (resultIsReadOnly) {
          TimeSeriesStatsData original = result;
          result = new TimeSeriesStatsData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TimeSeriesStatsData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Categories.TimeSeriesStatsData.Descriptor; }
      }
      
      public override TimeSeriesStatsData DefaultInstanceForType {
        get { return global::Senseix.Message.Categories.TimeSeriesStatsData.DefaultInstance; }
      }
      
      public override TimeSeriesStatsData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TimeSeriesStatsData) {
          return MergeFrom((TimeSeriesStatsData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TimeSeriesStatsData other) {
        if (other == global::Senseix.Message.Categories.TimeSeriesStatsData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDay) {
          Day = other.Day;
        }
        if (other.HasStats) {
          MergeStats(other.Stats);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_timeSeriesStatsDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _timeSeriesStatsDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDay = input.ReadString(ref result.day_);
              break;
            }
            case 18: {
              global::Senseix.Message.Categories.StatisticsData.Builder subBuilder = global::Senseix.Message.Categories.StatisticsData.CreateBuilder();
              if (result.hasStats) {
                subBuilder.MergeFrom(Stats);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Stats = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDay {
        get { return result.hasDay; }
      }
      public string Day {
        get { return result.Day; }
        set { SetDay(value); }
      }
      public Builder SetDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDay = true;
        result.day_ = value;
        return this;
      }
      public Builder ClearDay() {
        PrepareBuilder();
        result.hasDay = false;
        result.day_ = "";
        return this;
      }
      
      public bool HasStats {
       get { return result.hasStats; }
      }
      public global::Senseix.Message.Categories.StatisticsData Stats {
        get { return result.Stats; }
        set { SetStats(value); }
      }
      public Builder SetStats(global::Senseix.Message.Categories.StatisticsData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStats = true;
        result.stats_ = value;
        return this;
      }
      public Builder SetStats(global::Senseix.Message.Categories.StatisticsData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStats = true;
        result.stats_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStats(global::Senseix.Message.Categories.StatisticsData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStats &&
            result.stats_ != global::Senseix.Message.Categories.StatisticsData.DefaultInstance) {
            result.stats_ = global::Senseix.Message.Categories.StatisticsData.CreateBuilder(result.stats_).MergeFrom(value).BuildPartial();
        } else {
          result.stats_ = value;
        }
        result.hasStats = true;
        return this;
      }
      public Builder ClearStats() {
        PrepareBuilder();
        result.hasStats = false;
        result.stats_ = null;
        return this;
      }
    }
    static TimeSeriesStatsData() {
      object.ReferenceEquals(global::Senseix.Message.Categories.Categories.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StatisticsGetResponse : pb::GeneratedMessage<StatisticsGetResponse, StatisticsGetResponse.Builder> {
    private StatisticsGetResponse() { }
    private static readonly StatisticsGetResponse defaultInstance = new StatisticsGetResponse().MakeReadOnly();
    private static readonly string[] _statisticsGetResponseFieldNames = new string[] { "description", "id", "name", "parent_ids", "statistics" };
    private static readonly uint[] _statisticsGetResponseFieldTags = new uint[] { 26, 10, 18, 34, 42 };
    public static StatisticsGetResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StatisticsGetResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StatisticsGetResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_StatisticsGetResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StatisticsGetResponse, StatisticsGetResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_StatisticsGetResponse__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescriptionFieldNumber = 3;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int ParentIdsFieldNumber = 4;
    private pbc::PopsicleList<string> parentIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParentIdsList {
      get { return pbc::Lists.AsReadOnly(parentIds_); }
    }
    public int ParentIdsCount {
      get { return parentIds_.Count; }
    }
    public string GetParentIds(int index) {
      return parentIds_[index];
    }
    
    public const int StatisticsFieldNumber = 5;
    private bool hasStatistics;
    private global::Senseix.Message.Categories.StatisticsData statistics_;
    public bool HasStatistics {
      get { return hasStatistics; }
    }
    public global::Senseix.Message.Categories.StatisticsData Statistics {
      get { return statistics_ ?? global::Senseix.Message.Categories.StatisticsData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasDescription) return false;
        if (!hasStatistics) return false;
        if (!Statistics.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _statisticsGetResponseFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasDescription) {
        output.WriteString(3, field_names[0], Description);
      }
      if (parentIds_.Count > 0) {
        output.WriteStringArray(4, field_names[3], parentIds_);
      }
      if (hasStatistics) {
        output.WriteMessage(5, field_names[4], Statistics);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Description);
        }
        {
          int dataSize = 0;
          foreach (string element in ParentIdsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * parentIds_.Count;
        }
        if (hasStatistics) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Statistics);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StatisticsGetResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatisticsGetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatisticsGetResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatisticsGetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatisticsGetResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatisticsGetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StatisticsGetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StatisticsGetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StatisticsGetResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatisticsGetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StatisticsGetResponse MakeReadOnly() {
      parentIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StatisticsGetResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StatisticsGetResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StatisticsGetResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StatisticsGetResponse result;
      
      private StatisticsGetResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          StatisticsGetResponse original = result;
          result = new StatisticsGetResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StatisticsGetResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Categories.StatisticsGetResponse.Descriptor; }
      }
      
      public override StatisticsGetResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Categories.StatisticsGetResponse.DefaultInstance; }
      }
      
      public override StatisticsGetResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StatisticsGetResponse) {
          return MergeFrom((StatisticsGetResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StatisticsGetResponse other) {
        if (other == global::Senseix.Message.Categories.StatisticsGetResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.parentIds_.Count != 0) {
          result.parentIds_.Add(other.parentIds_);
        }
        if (other.HasStatistics) {
          MergeStatistics(other.Statistics);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_statisticsGetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _statisticsGetResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.parentIds_);
              break;
            }
            case 42: {
              global::Senseix.Message.Categories.StatisticsData.Builder subBuilder = global::Senseix.Message.Categories.StatisticsData.CreateBuilder();
              if (result.hasStatistics) {
                subBuilder.MergeFrom(Statistics);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Statistics = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> ParentIdsList {
        get { return PrepareBuilder().parentIds_; }
      }
      public int ParentIdsCount {
        get { return result.ParentIdsCount; }
      }
      public string GetParentIds(int index) {
        return result.GetParentIds(index);
      }
      public Builder SetParentIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parentIds_[index] = value;
        return this;
      }
      public Builder AddParentIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parentIds_.Add(value);
        return this;
      }
      public Builder AddRangeParentIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.parentIds_.Add(values);
        return this;
      }
      public Builder ClearParentIds() {
        PrepareBuilder();
        result.parentIds_.Clear();
        return this;
      }
      
      public bool HasStatistics {
       get { return result.hasStatistics; }
      }
      public global::Senseix.Message.Categories.StatisticsData Statistics {
        get { return result.Statistics; }
        set { SetStatistics(value); }
      }
      public Builder SetStatistics(global::Senseix.Message.Categories.StatisticsData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatistics = true;
        result.statistics_ = value;
        return this;
      }
      public Builder SetStatistics(global::Senseix.Message.Categories.StatisticsData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatistics = true;
        result.statistics_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatistics(global::Senseix.Message.Categories.StatisticsData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatistics &&
            result.statistics_ != global::Senseix.Message.Categories.StatisticsData.DefaultInstance) {
            result.statistics_ = global::Senseix.Message.Categories.StatisticsData.CreateBuilder(result.statistics_).MergeFrom(value).BuildPartial();
        } else {
          result.statistics_ = value;
        }
        result.hasStatistics = true;
        return this;
      }
      public Builder ClearStatistics() {
        PrepareBuilder();
        result.hasStatistics = false;
        result.statistics_ = null;
        return this;
      }
    }
    static StatisticsGetResponse() {
      object.ReferenceEquals(global::Senseix.Message.Categories.Categories.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CategoriesGetResponse : pb::GeneratedMessage<CategoriesGetResponse, CategoriesGetResponse.Builder> {
    private CategoriesGetResponse() { }
    private static readonly CategoriesGetResponse defaultInstance = new CategoriesGetResponse().MakeReadOnly();
    private static readonly string[] _categoriesGetResponseFieldNames = new string[] { "category_ids" };
    private static readonly uint[] _categoriesGetResponseFieldTags = new uint[] { 10 };
    public static CategoriesGetResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CategoriesGetResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CategoriesGetResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_CategoriesGetResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CategoriesGetResponse, CategoriesGetResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_CategoriesGetResponse__FieldAccessorTable; }
    }
    
    public const int CategoryIdsFieldNumber = 1;
    private pbc::PopsicleList<string> categoryIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> CategoryIdsList {
      get { return pbc::Lists.AsReadOnly(categoryIds_); }
    }
    public int CategoryIdsCount {
      get { return categoryIds_.Count; }
    }
    public string GetCategoryIds(int index) {
      return categoryIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _categoriesGetResponseFieldNames;
      if (categoryIds_.Count > 0) {
        output.WriteStringArray(1, field_names[0], categoryIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (string element in CategoryIdsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * categoryIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CategoriesGetResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CategoriesGetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CategoriesGetResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CategoriesGetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CategoriesGetResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CategoriesGetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CategoriesGetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CategoriesGetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CategoriesGetResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CategoriesGetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CategoriesGetResponse MakeReadOnly() {
      categoryIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CategoriesGetResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CategoriesGetResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CategoriesGetResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CategoriesGetResponse result;
      
      private CategoriesGetResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CategoriesGetResponse original = result;
          result = new CategoriesGetResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CategoriesGetResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Categories.CategoriesGetResponse.Descriptor; }
      }
      
      public override CategoriesGetResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Categories.CategoriesGetResponse.DefaultInstance; }
      }
      
      public override CategoriesGetResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CategoriesGetResponse) {
          return MergeFrom((CategoriesGetResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CategoriesGetResponse other) {
        if (other == global::Senseix.Message.Categories.CategoriesGetResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.categoryIds_.Count != 0) {
          result.categoryIds_.Add(other.categoryIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_categoriesGetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _categoriesGetResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.categoryIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> CategoryIdsList {
        get { return PrepareBuilder().categoryIds_; }
      }
      public int CategoryIdsCount {
        get { return result.CategoryIdsCount; }
      }
      public string GetCategoryIds(int index) {
        return result.GetCategoryIds(index);
      }
      public Builder SetCategoryIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.categoryIds_[index] = value;
        return this;
      }
      public Builder AddCategoryIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.categoryIds_.Add(value);
        return this;
      }
      public Builder AddRangeCategoryIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.categoryIds_.Add(values);
        return this;
      }
      public Builder ClearCategoryIds() {
        PrepareBuilder();
        result.categoryIds_.Clear();
        return this;
      }
    }
    static CategoriesGetResponse() {
      object.ReferenceEquals(global::Senseix.Message.Categories.Categories.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TimeSeriesGetResponse : pb::GeneratedMessage<TimeSeriesGetResponse, TimeSeriesGetResponse.Builder> {
    private TimeSeriesGetResponse() { }
    private static readonly TimeSeriesGetResponse defaultInstance = new TimeSeriesGetResponse().MakeReadOnly();
    private static readonly string[] _timeSeriesGetResponseFieldNames = new string[] { "description", "id", "name", "series" };
    private static readonly uint[] _timeSeriesGetResponseFieldTags = new uint[] { 26, 10, 18, 34 };
    public static TimeSeriesGetResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TimeSeriesGetResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TimeSeriesGetResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_TimeSeriesGetResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TimeSeriesGetResponse, TimeSeriesGetResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Categories.Categories.internal__static_Senseix_Message_Categories_TimeSeriesGetResponse__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescriptionFieldNumber = 3;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int SeriesFieldNumber = 4;
    private pbc::PopsicleList<global::Senseix.Message.Categories.TimeSeriesStatsData> series_ = new pbc::PopsicleList<global::Senseix.Message.Categories.TimeSeriesStatsData>();
    public scg::IList<global::Senseix.Message.Categories.TimeSeriesStatsData> SeriesList {
      get { return series_; }
    }
    public int SeriesCount {
      get { return series_.Count; }
    }
    public global::Senseix.Message.Categories.TimeSeriesStatsData GetSeries(int index) {
      return series_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasDescription) return false;
        foreach (global::Senseix.Message.Categories.TimeSeriesStatsData element in SeriesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _timeSeriesGetResponseFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasDescription) {
        output.WriteString(3, field_names[0], Description);
      }
      if (series_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], series_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Description);
        }
        foreach (global::Senseix.Message.Categories.TimeSeriesStatsData element in SeriesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TimeSeriesGetResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TimeSeriesGetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TimeSeriesGetResponse MakeReadOnly() {
      series_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TimeSeriesGetResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TimeSeriesGetResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TimeSeriesGetResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TimeSeriesGetResponse result;
      
      private TimeSeriesGetResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          TimeSeriesGetResponse original = result;
          result = new TimeSeriesGetResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TimeSeriesGetResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Categories.TimeSeriesGetResponse.Descriptor; }
      }
      
      public override TimeSeriesGetResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Categories.TimeSeriesGetResponse.DefaultInstance; }
      }
      
      public override TimeSeriesGetResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TimeSeriesGetResponse) {
          return MergeFrom((TimeSeriesGetResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TimeSeriesGetResponse other) {
        if (other == global::Senseix.Message.Categories.TimeSeriesGetResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.series_.Count != 0) {
          result.series_.Add(other.series_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_timeSeriesGetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _timeSeriesGetResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.series_, global::Senseix.Message.Categories.TimeSeriesStatsData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Senseix.Message.Categories.TimeSeriesStatsData> SeriesList {
        get { return PrepareBuilder().series_; }
      }
      public int SeriesCount {
        get { return result.SeriesCount; }
      }
      public global::Senseix.Message.Categories.TimeSeriesStatsData GetSeries(int index) {
        return result.GetSeries(index);
      }
      public Builder SetSeries(int index, global::Senseix.Message.Categories.TimeSeriesStatsData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.series_[index] = value;
        return this;
      }
      public Builder SetSeries(int index, global::Senseix.Message.Categories.TimeSeriesStatsData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.series_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSeries(global::Senseix.Message.Categories.TimeSeriesStatsData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.series_.Add(value);
        return this;
      }
      public Builder AddSeries(global::Senseix.Message.Categories.TimeSeriesStatsData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.series_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSeries(scg::IEnumerable<global::Senseix.Message.Categories.TimeSeriesStatsData> values) {
        PrepareBuilder();
        result.series_.Add(values);
        return this;
      }
      public Builder ClearSeries() {
        PrepareBuilder();
        result.series_.Clear();
        return this;
      }
    }
    static TimeSeriesGetResponse() {
      object.ReferenceEquals(global::Senseix.Message.Categories.Categories.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
