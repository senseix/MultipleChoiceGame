// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Senseix.Message.Debug {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Debug {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Debug_DebugLogSubmitRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Debug.DebugLogSubmitRequest, global::Senseix.Message.Debug.DebugLogSubmitRequest.Builder> internal__static_Senseix_Message_Debug_DebugLogSubmitRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Debug_DebugLogSubmitResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Debug.DebugLogSubmitResponse, global::Senseix.Message.Debug.DebugLogSubmitResponse.Builder> internal__static_Senseix_Message_Debug_DebugLogSubmitResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Debug_ServerErrorResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Debug.ServerErrorResponse, global::Senseix.Message.Debug.ServerErrorResponse.Builder> internal__static_Senseix_Message_Debug_ServerErrorResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Debug() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtEZWJ1Zy5wcm90bxIVU2Vuc2VpeC5NZXNzYWdlLkRlYnVnIj0KFURlYnVn" + 
          "TG9nU3VibWl0UmVxdWVzdBIRCglkZXZpY2VfaWQYASACKAkSEQoJZGVidWdf" + 
          "bG9nGAIgAigJIhgKFkRlYnVnTG9nU3VibWl0UmVzcG9uc2UiNgoTU2VydmVy" + 
          "RXJyb3JSZXNwb25zZRIOCgZzdGF0dXMYASACKA0SDwoHbWVzc2FnZRgCIAIo" + 
          "CQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Senseix_Message_Debug_DebugLogSubmitRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Senseix_Message_Debug_DebugLogSubmitRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Debug.DebugLogSubmitRequest, global::Senseix.Message.Debug.DebugLogSubmitRequest.Builder>(internal__static_Senseix_Message_Debug_DebugLogSubmitRequest__Descriptor,
                new string[] { "DeviceId", "DebugLog", });
        internal__static_Senseix_Message_Debug_DebugLogSubmitResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Senseix_Message_Debug_DebugLogSubmitResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Debug.DebugLogSubmitResponse, global::Senseix.Message.Debug.DebugLogSubmitResponse.Builder>(internal__static_Senseix_Message_Debug_DebugLogSubmitResponse__Descriptor,
                new string[] { });
        internal__static_Senseix_Message_Debug_ServerErrorResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Senseix_Message_Debug_ServerErrorResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Debug.ServerErrorResponse, global::Senseix.Message.Debug.ServerErrorResponse.Builder>(internal__static_Senseix_Message_Debug_ServerErrorResponse__Descriptor,
                new string[] { "Status", "Message", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DebugLogSubmitRequest : pb::GeneratedMessage<DebugLogSubmitRequest, DebugLogSubmitRequest.Builder> {
    private DebugLogSubmitRequest() { }
    private static readonly DebugLogSubmitRequest defaultInstance = new DebugLogSubmitRequest().MakeReadOnly();
    private static readonly string[] _debugLogSubmitRequestFieldNames = new string[] { "debug_log", "device_id" };
    private static readonly uint[] _debugLogSubmitRequestFieldTags = new uint[] { 18, 10 };
    public static DebugLogSubmitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DebugLogSubmitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DebugLogSubmitRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Debug.Debug.internal__static_Senseix_Message_Debug_DebugLogSubmitRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DebugLogSubmitRequest, DebugLogSubmitRequest.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Debug.Debug.internal__static_Senseix_Message_Debug_DebugLogSubmitRequest__FieldAccessorTable; }
    }
    
    public const int DeviceIdFieldNumber = 1;
    private bool hasDeviceId;
    private string deviceId_ = "";
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    public string DeviceId {
      get { return deviceId_; }
    }
    
    public const int DebugLogFieldNumber = 2;
    private bool hasDebugLog;
    private string debugLog_ = "";
    public bool HasDebugLog {
      get { return hasDebugLog; }
    }
    public string DebugLog {
      get { return debugLog_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDeviceId) return false;
        if (!hasDebugLog) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _debugLogSubmitRequestFieldNames;
      if (hasDeviceId) {
        output.WriteString(1, field_names[1], DeviceId);
      }
      if (hasDebugLog) {
        output.WriteString(2, field_names[0], DebugLog);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, DeviceId);
        }
        if (hasDebugLog) {
          size += pb::CodedOutputStream.ComputeStringSize(2, DebugLog);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DebugLogSubmitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DebugLogSubmitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DebugLogSubmitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DebugLogSubmitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DebugLogSubmitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DebugLogSubmitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DebugLogSubmitRequest result;
      
      private DebugLogSubmitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DebugLogSubmitRequest original = result;
          result = new DebugLogSubmitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DebugLogSubmitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Debug.DebugLogSubmitRequest.Descriptor; }
      }
      
      public override DebugLogSubmitRequest DefaultInstanceForType {
        get { return global::Senseix.Message.Debug.DebugLogSubmitRequest.DefaultInstance; }
      }
      
      public override DebugLogSubmitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DebugLogSubmitRequest) {
          return MergeFrom((DebugLogSubmitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DebugLogSubmitRequest other) {
        if (other == global::Senseix.Message.Debug.DebugLogSubmitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasDebugLog) {
          DebugLog = other.DebugLog;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_debugLogSubmitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _debugLogSubmitRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDeviceId = input.ReadString(ref result.deviceId_);
              break;
            }
            case 18: {
              result.hasDebugLog = input.ReadString(ref result.debugLog_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceId {
        get { return result.hasDeviceId; }
      }
      public string DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      public Builder SetDeviceId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        PrepareBuilder();
        result.hasDeviceId = false;
        result.deviceId_ = "";
        return this;
      }
      
      public bool HasDebugLog {
        get { return result.hasDebugLog; }
      }
      public string DebugLog {
        get { return result.DebugLog; }
        set { SetDebugLog(value); }
      }
      public Builder SetDebugLog(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebugLog = true;
        result.debugLog_ = value;
        return this;
      }
      public Builder ClearDebugLog() {
        PrepareBuilder();
        result.hasDebugLog = false;
        result.debugLog_ = "";
        return this;
      }
    }
    static DebugLogSubmitRequest() {
      object.ReferenceEquals(global::Senseix.Message.Debug.Debug.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DebugLogSubmitResponse : pb::GeneratedMessage<DebugLogSubmitResponse, DebugLogSubmitResponse.Builder> {
    private DebugLogSubmitResponse() { }
    private static readonly DebugLogSubmitResponse defaultInstance = new DebugLogSubmitResponse().MakeReadOnly();
    private static readonly string[] _debugLogSubmitResponseFieldNames = new string[] {  };
    private static readonly uint[] _debugLogSubmitResponseFieldTags = new uint[] {  };
    public static DebugLogSubmitResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DebugLogSubmitResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DebugLogSubmitResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Debug.Debug.internal__static_Senseix_Message_Debug_DebugLogSubmitResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DebugLogSubmitResponse, DebugLogSubmitResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Debug.Debug.internal__static_Senseix_Message_Debug_DebugLogSubmitResponse__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _debugLogSubmitResponseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DebugLogSubmitResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DebugLogSubmitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DebugLogSubmitResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DebugLogSubmitResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DebugLogSubmitResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DebugLogSubmitResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DebugLogSubmitResponse result;
      
      private DebugLogSubmitResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          DebugLogSubmitResponse original = result;
          result = new DebugLogSubmitResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DebugLogSubmitResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Debug.DebugLogSubmitResponse.Descriptor; }
      }
      
      public override DebugLogSubmitResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Debug.DebugLogSubmitResponse.DefaultInstance; }
      }
      
      public override DebugLogSubmitResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DebugLogSubmitResponse) {
          return MergeFrom((DebugLogSubmitResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DebugLogSubmitResponse other) {
        if (other == global::Senseix.Message.Debug.DebugLogSubmitResponse.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_debugLogSubmitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _debugLogSubmitResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static DebugLogSubmitResponse() {
      object.ReferenceEquals(global::Senseix.Message.Debug.Debug.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServerErrorResponse : pb::GeneratedMessage<ServerErrorResponse, ServerErrorResponse.Builder> {
    private ServerErrorResponse() { }
    private static readonly ServerErrorResponse defaultInstance = new ServerErrorResponse().MakeReadOnly();
    private static readonly string[] _serverErrorResponseFieldNames = new string[] { "message", "status" };
    private static readonly uint[] _serverErrorResponseFieldTags = new uint[] { 18, 8 };
    public static ServerErrorResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerErrorResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerErrorResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Debug.Debug.internal__static_Senseix_Message_Debug_ServerErrorResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerErrorResponse, ServerErrorResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Debug.Debug.internal__static_Senseix_Message_Debug_ServerErrorResponse__FieldAccessorTable; }
    }
    
    public const int StatusFieldNumber = 1;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint Status {
      get { return status_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatus) return false;
        if (!hasMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverErrorResponseFieldNames;
      if (hasStatus) {
        output.WriteUInt32(1, field_names[1], Status);
      }
      if (hasMessage) {
        output.WriteString(2, field_names[0], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Status);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerErrorResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerErrorResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerErrorResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerErrorResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerErrorResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerErrorResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerErrorResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerErrorResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerErrorResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerErrorResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerErrorResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerErrorResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerErrorResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerErrorResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerErrorResponse result;
      
      private ServerErrorResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerErrorResponse original = result;
          result = new ServerErrorResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerErrorResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Debug.ServerErrorResponse.Descriptor; }
      }
      
      public override ServerErrorResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Debug.ServerErrorResponse.DefaultInstance; }
      }
      
      public override ServerErrorResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerErrorResponse) {
          return MergeFrom((ServerErrorResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerErrorResponse other) {
        if (other == global::Senseix.Message.Debug.ServerErrorResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverErrorResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverErrorResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
            case 18: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static ServerErrorResponse() {
      object.ReferenceEquals(global::Senseix.Message.Debug.Debug.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
