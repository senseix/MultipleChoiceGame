// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Senseix.Message.Atom {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Atom {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Senseix_Message_Atom_Atom__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Atom.Atom, global::Senseix.Message.Atom.Atom.Builder> internal__static_Senseix_Message_Atom_Atom__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Atom() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CgpBdG9tLnByb3RvEhRTZW5zZWl4Lk1lc3NhZ2UuQXRvbSKcAQoEQXRvbRIM" + 
            "CgR1dWlkGAEgAigJEjMKBHR5cGUYAiACKA4yHy5TZW5zZWl4Lk1lc3NhZ2Uu" + 
            "QXRvbS5BdG9tLlR5cGU6BFRFWFQSDAoEZGF0YRgDIAIoDBIQCghyZXF1aXJl" + 
            "ZBgEIAIoCCIxCgRUeXBlEggKBFRFWFQQABIJCgVJTUFHRRABEgkKBUFVRElP" + 
            "EAISCQoFVklERU8QAw==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Senseix_Message_Atom_Atom__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Senseix_Message_Atom_Atom__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Atom.Atom, global::Senseix.Message.Atom.Atom.Builder>(internal__static_Senseix_Message_Atom_Atom__Descriptor,
                  new string[] { "Uuid", "Type", "Data", "Required", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Atom : pb::GeneratedMessage<Atom, Atom.Builder> {
    private Atom() { }
    private static readonly Atom defaultInstance = new Atom().MakeReadOnly();
    private static readonly string[] _atomFieldNames = new string[] { "data", "required", "type", "uuid" };
    private static readonly uint[] _atomFieldTags = new uint[] { 26, 32, 16, 10 };
    public static Atom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Atom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Atom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Atom.Proto.Atom.internal__static_Senseix_Message_Atom_Atom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Atom, Atom.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Atom.Proto.Atom.internal__static_Senseix_Message_Atom_Atom__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        TEXT = 0,
        IMAGE = 1,
        AUDIO = 2,
        VIDEO = 3,
      }
      
    }
    #endregion
    
    public const int UuidFieldNumber = 1;
    private bool hasUuid;
    private string uuid_ = "";
    public bool HasUuid {
      get { return hasUuid; }
    }
    public string Uuid {
      get { return uuid_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::Senseix.Message.Atom.Atom.Types.Type type_ = global::Senseix.Message.Atom.Atom.Types.Type.TEXT;
    public bool HasType {
      get { return hasType; }
    }
    public global::Senseix.Message.Atom.Atom.Types.Type Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 3;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int RequiredFieldNumber = 4;
    private bool hasRequired;
    private bool required_;
    public bool HasRequired {
      get { return hasRequired; }
    }
    public bool Required {
      get { return required_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUuid) return false;
        if (!hasType) return false;
        if (!hasData) return false;
        if (!hasRequired) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _atomFieldNames;
      if (hasUuid) {
        output.WriteString(1, field_names[3], Uuid);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[2], (int) Type, Type);
      }
      if (hasData) {
        output.WriteBytes(3, field_names[0], Data);
      }
      if (hasRequired) {
        output.WriteBool(4, field_names[1], Required);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUuid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uuid);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Data);
        }
        if (hasRequired) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Required);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Atom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Atom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Atom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Atom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Atom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Atom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Atom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Atom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Atom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Atom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Atom MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Atom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Atom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Atom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Atom result;
      
      private Atom PrepareBuilder() {
        if (resultIsReadOnly) {
          Atom original = result;
          result = new Atom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Atom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Atom.Atom.Descriptor; }
      }
      
      public override Atom DefaultInstanceForType {
        get { return global::Senseix.Message.Atom.Atom.DefaultInstance; }
      }
      
      public override Atom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Atom) {
          return MergeFrom((Atom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Atom other) {
        if (other == global::Senseix.Message.Atom.Atom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUuid) {
          Uuid = other.Uuid;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasRequired) {
          Required = other.Required;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_atomFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _atomFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUuid = input.ReadString(ref result.uuid_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
            case 32: {
              result.hasRequired = input.ReadBool(ref result.required_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUuid {
        get { return result.hasUuid; }
      }
      public string Uuid {
        get { return result.Uuid; }
        set { SetUuid(value); }
      }
      public Builder SetUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder ClearUuid() {
        PrepareBuilder();
        result.hasUuid = false;
        result.uuid_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Senseix.Message.Atom.Atom.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Senseix.Message.Atom.Atom.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Senseix.Message.Atom.Atom.Types.Type.TEXT;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasRequired {
        get { return result.hasRequired; }
      }
      public bool Required {
        get { return result.Required; }
        set { SetRequired(value); }
      }
      public Builder SetRequired(bool value) {
        PrepareBuilder();
        result.hasRequired = true;
        result.required_ = value;
        return this;
      }
      public Builder ClearRequired() {
        PrepareBuilder();
        result.hasRequired = false;
        result.required_ = false;
        return this;
      }
    }
    static Atom() {
      object.ReferenceEquals(global::Senseix.Message.Atom.Proto.Atom.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
