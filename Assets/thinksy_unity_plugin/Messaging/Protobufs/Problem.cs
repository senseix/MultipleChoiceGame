// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Senseix.Message.Problem {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Problem {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_Formatter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Formatter, global::Senseix.Message.Problem.Formatter.Builder> internal__static_Senseix_Message_Problem_Formatter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_Question__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Question, global::Senseix.Message.Problem.Question.Builder> internal__static_Senseix_Message_Problem_Question__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_Answer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Answer, global::Senseix.Message.Problem.Answer.Builder> internal__static_Senseix_Message_Problem_Answer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_Distractor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Distractor, global::Senseix.Message.Problem.Distractor.Builder> internal__static_Senseix_Message_Problem_Distractor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_ProblemData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemData, global::Senseix.Message.Problem.ProblemData.Builder> internal__static_Senseix_Message_Problem_ProblemData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_AnswerIdentifier__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.AnswerIdentifier, global::Senseix.Message.Problem.AnswerIdentifier.Builder> internal__static_Senseix_Message_Problem_AnswerIdentifier__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_ProblemPost__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemPost, global::Senseix.Message.Problem.ProblemPost.Builder> internal__static_Senseix_Message_Problem_ProblemPost__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_ProblemPostRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemPostRequest, global::Senseix.Message.Problem.ProblemPostRequest.Builder> internal__static_Senseix_Message_Problem_ProblemPostRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_ProblemPostResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemPostResponse, global::Senseix.Message.Problem.ProblemPostResponse.Builder> internal__static_Senseix_Message_Problem_ProblemPostResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_ProblemGetRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemGetRequest, global::Senseix.Message.Problem.ProblemGetRequest.Builder> internal__static_Senseix_Message_Problem_ProblemGetRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Senseix_Message_Problem_ProblemGetResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemGetResponse, global::Senseix.Message.Problem.ProblemGetResponse.Builder> internal__static_Senseix_Message_Problem_ProblemGetResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Problem() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1Qcm9ibGVtLnByb3RvEhdTZW5zZWl4Lk1lc3NhZ2UuUHJvYmxlbRoKQXRv" + 
          "bS5wcm90byImCglGb3JtYXR0ZXISDAoEaHRtbBgBIAEoCRILCgNjc3MYAiAB" + 
          "KAkidwoIUXVlc3Rpb24SKAoEYXRvbRgBIAMoCzIaLlNlbnNlaXguTWVzc2Fn" + 
          "ZS5BdG9tLkF0b20SMgoGZm9ybWF0GAIgASgLMiIuU2Vuc2VpeC5NZXNzYWdl" + 
          "LlByb2JsZW0uRm9ybWF0dGVyEg0KBWltYWdlGAMgASgMImYKBkFuc3dlchIo" + 
          "CgRhdG9tGAEgAygLMhouU2Vuc2VpeC5NZXNzYWdlLkF0b20uQXRvbRIyCgZm" + 
          "b3JtYXQYAiABKAsyIi5TZW5zZWl4Lk1lc3NhZ2UuUHJvYmxlbS5Gb3JtYXR0" + 
          "ZXIiagoKRGlzdHJhY3RvchIoCgRhdG9tGAEgAygLMhouU2Vuc2VpeC5NZXNz" + 
          "YWdlLkF0b20uQXRvbRIyCgZmb3JtYXQYAiABKAsyIi5TZW5zZWl4Lk1lc3Nh" + 
          "Z2UuUHJvYmxlbS5Gb3JtYXR0ZXIiugEKC1Byb2JsZW1EYXRhEgwKBHV1aWQY" + 
          "ASACKAkSMwoIcXVlc3Rpb24YAiACKAsyIS5TZW5zZWl4Lk1lc3NhZ2UuUHJv" + 
          "YmxlbS5RdWVzdGlvbhIvCgZhbnN3ZXIYAyACKAsyHy5TZW5zZWl4Lk1lc3Nh" + 
          "Z2UuUHJvYmxlbS5BbnN3ZXISNwoKZGlzdHJhY3RvchgEIAIoCzIjLlNlbnNl" + 
          "aXguTWVzc2FnZS5Qcm9ibGVtLkRpc3RyYWN0b3IiIAoQQW5zd2VySWRlbnRp" + 
          "ZmllchIMCgR1dWlkGAEgAygJIsYBCgtQcm9ibGVtUG9zdBIRCglwbGF5ZXJf" + 
          "aWQYASACKAkSEgoKcHJvYmxlbV9pZBgCIAIoCRI9CgphbnN3ZXJfaWRzGAMg" + 
          "ASgLMikuU2Vuc2VpeC5NZXNzYWdlLlByb2JsZW0uQW5zd2VySWRlbnRpZmll" + 
          "chIQCghkdXJhdGlvbhgEIAEoAhIPCgdza2lwcGVkGAUgASgIEg8KB2NvcnJl" + 
          "Y3QYBiABKAgSHQoVYW5zd2VyZWRfYXRfdW5peF90aW1lGAcgASgEIksKElBy" + 
          "b2JsZW1Qb3N0UmVxdWVzdBI1Cgdwcm9ibGVtGAEgAygLMiQuU2Vuc2VpeC5N" + 
          "ZXNzYWdlLlByb2JsZW0uUHJvYmxlbVBvc3QiFQoTUHJvYmxlbVBvc3RSZXNw" + 
          "b25zZSI9ChFQcm9ibGVtR2V0UmVxdWVzdBIRCglwbGF5ZXJfaWQYASACKAkS" + 
          "FQoNcHJvYmxlbV9jb3VudBgCIAEoDSJLChJQcm9ibGVtR2V0UmVzcG9uc2US" + 
          "NQoHcHJvYmxlbRgBIAMoCzIkLlNlbnNlaXguTWVzc2FnZS5Qcm9ibGVtLlBy" + 
          "b2JsZW1EYXRh");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Senseix_Message_Problem_Formatter__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Senseix_Message_Problem_Formatter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Formatter, global::Senseix.Message.Problem.Formatter.Builder>(internal__static_Senseix_Message_Problem_Formatter__Descriptor,
                new string[] { "Html", "Css", });
        internal__static_Senseix_Message_Problem_Question__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Senseix_Message_Problem_Question__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Question, global::Senseix.Message.Problem.Question.Builder>(internal__static_Senseix_Message_Problem_Question__Descriptor,
                new string[] { "Atom", "Format", "Image", });
        internal__static_Senseix_Message_Problem_Answer__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Senseix_Message_Problem_Answer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Answer, global::Senseix.Message.Problem.Answer.Builder>(internal__static_Senseix_Message_Problem_Answer__Descriptor,
                new string[] { "Atom", "Format", });
        internal__static_Senseix_Message_Problem_Distractor__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Senseix_Message_Problem_Distractor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.Distractor, global::Senseix.Message.Problem.Distractor.Builder>(internal__static_Senseix_Message_Problem_Distractor__Descriptor,
                new string[] { "Atom", "Format", });
        internal__static_Senseix_Message_Problem_ProblemData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Senseix_Message_Problem_ProblemData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemData, global::Senseix.Message.Problem.ProblemData.Builder>(internal__static_Senseix_Message_Problem_ProblemData__Descriptor,
                new string[] { "Uuid", "Question", "Answer", "Distractor", });
        internal__static_Senseix_Message_Problem_AnswerIdentifier__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Senseix_Message_Problem_AnswerIdentifier__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.AnswerIdentifier, global::Senseix.Message.Problem.AnswerIdentifier.Builder>(internal__static_Senseix_Message_Problem_AnswerIdentifier__Descriptor,
                new string[] { "Uuid", });
        internal__static_Senseix_Message_Problem_ProblemPost__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Senseix_Message_Problem_ProblemPost__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemPost, global::Senseix.Message.Problem.ProblemPost.Builder>(internal__static_Senseix_Message_Problem_ProblemPost__Descriptor,
                new string[] { "PlayerId", "ProblemId", "AnswerIds", "Duration", "Skipped", "Correct", "AnsweredAtUnixTime", });
        internal__static_Senseix_Message_Problem_ProblemPostRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Senseix_Message_Problem_ProblemPostRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemPostRequest, global::Senseix.Message.Problem.ProblemPostRequest.Builder>(internal__static_Senseix_Message_Problem_ProblemPostRequest__Descriptor,
                new string[] { "Problem", });
        internal__static_Senseix_Message_Problem_ProblemPostResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Senseix_Message_Problem_ProblemPostResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemPostResponse, global::Senseix.Message.Problem.ProblemPostResponse.Builder>(internal__static_Senseix_Message_Problem_ProblemPostResponse__Descriptor,
                new string[] { });
        internal__static_Senseix_Message_Problem_ProblemGetRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Senseix_Message_Problem_ProblemGetRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemGetRequest, global::Senseix.Message.Problem.ProblemGetRequest.Builder>(internal__static_Senseix_Message_Problem_ProblemGetRequest__Descriptor,
                new string[] { "PlayerId", "ProblemCount", });
        internal__static_Senseix_Message_Problem_ProblemGetResponse__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Senseix_Message_Problem_ProblemGetResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Senseix.Message.Problem.ProblemGetResponse, global::Senseix.Message.Problem.ProblemGetResponse.Builder>(internal__static_Senseix_Message_Problem_ProblemGetResponse__Descriptor,
                new string[] { "Problem", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Senseix.Message.Atom.Proto.Atom.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Formatter : pb::GeneratedMessage<Formatter, Formatter.Builder> {
    private Formatter() { }
    private static readonly Formatter defaultInstance = new Formatter().MakeReadOnly();
    private static readonly string[] _formatterFieldNames = new string[] { "css", "html" };
    private static readonly uint[] _formatterFieldTags = new uint[] { 18, 10 };
    public static Formatter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Formatter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Formatter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Formatter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Formatter, Formatter.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Formatter__FieldAccessorTable; }
    }
    
    public const int HtmlFieldNumber = 1;
    private bool hasHtml;
    private string html_ = "";
    public bool HasHtml {
      get { return hasHtml; }
    }
    public string Html {
      get { return html_; }
    }
    
    public const int CssFieldNumber = 2;
    private bool hasCss;
    private string css_ = "";
    public bool HasCss {
      get { return hasCss; }
    }
    public string Css {
      get { return css_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _formatterFieldNames;
      if (hasHtml) {
        output.WriteString(1, field_names[1], Html);
      }
      if (hasCss) {
        output.WriteString(2, field_names[0], Css);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHtml) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Html);
        }
        if (hasCss) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Css);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Formatter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Formatter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Formatter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Formatter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Formatter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Formatter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Formatter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Formatter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Formatter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Formatter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Formatter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Formatter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Formatter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Formatter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Formatter result;
      
      private Formatter PrepareBuilder() {
        if (resultIsReadOnly) {
          Formatter original = result;
          result = new Formatter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Formatter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.Formatter.Descriptor; }
      }
      
      public override Formatter DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.Formatter.DefaultInstance; }
      }
      
      public override Formatter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Formatter) {
          return MergeFrom((Formatter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Formatter other) {
        if (other == global::Senseix.Message.Problem.Formatter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHtml) {
          Html = other.Html;
        }
        if (other.HasCss) {
          Css = other.Css;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_formatterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _formatterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasHtml = input.ReadString(ref result.html_);
              break;
            }
            case 18: {
              result.hasCss = input.ReadString(ref result.css_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHtml {
        get { return result.hasHtml; }
      }
      public string Html {
        get { return result.Html; }
        set { SetHtml(value); }
      }
      public Builder SetHtml(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHtml = true;
        result.html_ = value;
        return this;
      }
      public Builder ClearHtml() {
        PrepareBuilder();
        result.hasHtml = false;
        result.html_ = "";
        return this;
      }
      
      public bool HasCss {
        get { return result.hasCss; }
      }
      public string Css {
        get { return result.Css; }
        set { SetCss(value); }
      }
      public Builder SetCss(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCss = true;
        result.css_ = value;
        return this;
      }
      public Builder ClearCss() {
        PrepareBuilder();
        result.hasCss = false;
        result.css_ = "";
        return this;
      }
    }
    static Formatter() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Question : pb::GeneratedMessage<Question, Question.Builder> {
    private Question() { }
    private static readonly Question defaultInstance = new Question().MakeReadOnly();
    private static readonly string[] _questionFieldNames = new string[] { "atom", "format", "image" };
    private static readonly uint[] _questionFieldTags = new uint[] { 10, 18, 26 };
    public static Question DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Question DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Question ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Question__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Question, Question.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Question__FieldAccessorTable; }
    }
    
    public const int AtomFieldNumber = 1;
    private pbc::PopsicleList<global::Senseix.Message.Atom.Atom> atom_ = new pbc::PopsicleList<global::Senseix.Message.Atom.Atom>();
    public scg::IList<global::Senseix.Message.Atom.Atom> AtomList {
      get { return atom_; }
    }
    public int AtomCount {
      get { return atom_.Count; }
    }
    public global::Senseix.Message.Atom.Atom GetAtom(int index) {
      return atom_[index];
    }
    
    public const int FormatFieldNumber = 2;
    private bool hasFormat;
    private global::Senseix.Message.Problem.Formatter format_;
    public bool HasFormat {
      get { return hasFormat; }
    }
    public global::Senseix.Message.Problem.Formatter Format {
      get { return format_ ?? global::Senseix.Message.Problem.Formatter.DefaultInstance; }
    }
    
    public const int ImageFieldNumber = 3;
    private bool hasImage;
    private pb::ByteString image_ = pb::ByteString.Empty;
    public bool HasImage {
      get { return hasImage; }
    }
    public pb::ByteString Image {
      get { return image_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Senseix.Message.Atom.Atom element in AtomList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questionFieldNames;
      if (atom_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], atom_);
      }
      if (hasFormat) {
        output.WriteMessage(2, field_names[1], Format);
      }
      if (hasImage) {
        output.WriteBytes(3, field_names[2], Image);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Senseix.Message.Atom.Atom element in AtomList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasFormat) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Format);
        }
        if (hasImage) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Image);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Question ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Question ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Question ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Question ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Question ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Question ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Question ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Question ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Question ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Question ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Question MakeReadOnly() {
      atom_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Question prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Question, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Question cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Question result;
      
      private Question PrepareBuilder() {
        if (resultIsReadOnly) {
          Question original = result;
          result = new Question();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Question MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.Question.Descriptor; }
      }
      
      public override Question DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.Question.DefaultInstance; }
      }
      
      public override Question BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Question) {
          return MergeFrom((Question) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Question other) {
        if (other == global::Senseix.Message.Problem.Question.DefaultInstance) return this;
        PrepareBuilder();
        if (other.atom_.Count != 0) {
          result.atom_.Add(other.atom_);
        }
        if (other.HasFormat) {
          MergeFormat(other.Format);
        }
        if (other.HasImage) {
          Image = other.Image;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.atom_, global::Senseix.Message.Atom.Atom.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::Senseix.Message.Problem.Formatter.Builder subBuilder = global::Senseix.Message.Problem.Formatter.CreateBuilder();
              if (result.hasFormat) {
                subBuilder.MergeFrom(Format);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Format = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasImage = input.ReadBytes(ref result.image_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Senseix.Message.Atom.Atom> AtomList {
        get { return PrepareBuilder().atom_; }
      }
      public int AtomCount {
        get { return result.AtomCount; }
      }
      public global::Senseix.Message.Atom.Atom GetAtom(int index) {
        return result.GetAtom(index);
      }
      public Builder SetAtom(int index, global::Senseix.Message.Atom.Atom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.atom_[index] = value;
        return this;
      }
      public Builder SetAtom(int index, global::Senseix.Message.Atom.Atom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.atom_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAtom(global::Senseix.Message.Atom.Atom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.atom_.Add(value);
        return this;
      }
      public Builder AddAtom(global::Senseix.Message.Atom.Atom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.atom_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAtom(scg::IEnumerable<global::Senseix.Message.Atom.Atom> values) {
        PrepareBuilder();
        result.atom_.Add(values);
        return this;
      }
      public Builder ClearAtom() {
        PrepareBuilder();
        result.atom_.Clear();
        return this;
      }
      
      public bool HasFormat {
       get { return result.hasFormat; }
      }
      public global::Senseix.Message.Problem.Formatter Format {
        get { return result.Format; }
        set { SetFormat(value); }
      }
      public Builder SetFormat(global::Senseix.Message.Problem.Formatter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormat = true;
        result.format_ = value;
        return this;
      }
      public Builder SetFormat(global::Senseix.Message.Problem.Formatter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFormat = true;
        result.format_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFormat(global::Senseix.Message.Problem.Formatter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFormat &&
            result.format_ != global::Senseix.Message.Problem.Formatter.DefaultInstance) {
            result.format_ = global::Senseix.Message.Problem.Formatter.CreateBuilder(result.format_).MergeFrom(value).BuildPartial();
        } else {
          result.format_ = value;
        }
        result.hasFormat = true;
        return this;
      }
      public Builder ClearFormat() {
        PrepareBuilder();
        result.hasFormat = false;
        result.format_ = null;
        return this;
      }
      
      public bool HasImage {
        get { return result.hasImage; }
      }
      public pb::ByteString Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImage = true;
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.hasImage = false;
        result.image_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Question() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Answer : pb::GeneratedMessage<Answer, Answer.Builder> {
    private Answer() { }
    private static readonly Answer defaultInstance = new Answer().MakeReadOnly();
    private static readonly string[] _answerFieldNames = new string[] { "atom", "format" };
    private static readonly uint[] _answerFieldTags = new uint[] { 10, 18 };
    public static Answer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Answer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Answer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Answer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Answer, Answer.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Answer__FieldAccessorTable; }
    }
    
    public const int AtomFieldNumber = 1;
    private pbc::PopsicleList<global::Senseix.Message.Atom.Atom> atom_ = new pbc::PopsicleList<global::Senseix.Message.Atom.Atom>();
    public scg::IList<global::Senseix.Message.Atom.Atom> AtomList {
      get { return atom_; }
    }
    public int AtomCount {
      get { return atom_.Count; }
    }
    public global::Senseix.Message.Atom.Atom GetAtom(int index) {
      return atom_[index];
    }
    
    public const int FormatFieldNumber = 2;
    private bool hasFormat;
    private global::Senseix.Message.Problem.Formatter format_;
    public bool HasFormat {
      get { return hasFormat; }
    }
    public global::Senseix.Message.Problem.Formatter Format {
      get { return format_ ?? global::Senseix.Message.Problem.Formatter.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Senseix.Message.Atom.Atom element in AtomList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _answerFieldNames;
      if (atom_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], atom_);
      }
      if (hasFormat) {
        output.WriteMessage(2, field_names[1], Format);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Senseix.Message.Atom.Atom element in AtomList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasFormat) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Format);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Answer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Answer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Answer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Answer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Answer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Answer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Answer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Answer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Answer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Answer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Answer MakeReadOnly() {
      atom_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Answer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Answer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Answer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Answer result;
      
      private Answer PrepareBuilder() {
        if (resultIsReadOnly) {
          Answer original = result;
          result = new Answer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Answer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.Answer.Descriptor; }
      }
      
      public override Answer DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.Answer.DefaultInstance; }
      }
      
      public override Answer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Answer) {
          return MergeFrom((Answer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Answer other) {
        if (other == global::Senseix.Message.Problem.Answer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.atom_.Count != 0) {
          result.atom_.Add(other.atom_);
        }
        if (other.HasFormat) {
          MergeFormat(other.Format);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_answerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _answerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.atom_, global::Senseix.Message.Atom.Atom.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::Senseix.Message.Problem.Formatter.Builder subBuilder = global::Senseix.Message.Problem.Formatter.CreateBuilder();
              if (result.hasFormat) {
                subBuilder.MergeFrom(Format);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Format = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Senseix.Message.Atom.Atom> AtomList {
        get { return PrepareBuilder().atom_; }
      }
      public int AtomCount {
        get { return result.AtomCount; }
      }
      public global::Senseix.Message.Atom.Atom GetAtom(int index) {
        return result.GetAtom(index);
      }
      public Builder SetAtom(int index, global::Senseix.Message.Atom.Atom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.atom_[index] = value;
        return this;
      }
      public Builder SetAtom(int index, global::Senseix.Message.Atom.Atom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.atom_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAtom(global::Senseix.Message.Atom.Atom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.atom_.Add(value);
        return this;
      }
      public Builder AddAtom(global::Senseix.Message.Atom.Atom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.atom_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAtom(scg::IEnumerable<global::Senseix.Message.Atom.Atom> values) {
        PrepareBuilder();
        result.atom_.Add(values);
        return this;
      }
      public Builder ClearAtom() {
        PrepareBuilder();
        result.atom_.Clear();
        return this;
      }
      
      public bool HasFormat {
       get { return result.hasFormat; }
      }
      public global::Senseix.Message.Problem.Formatter Format {
        get { return result.Format; }
        set { SetFormat(value); }
      }
      public Builder SetFormat(global::Senseix.Message.Problem.Formatter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormat = true;
        result.format_ = value;
        return this;
      }
      public Builder SetFormat(global::Senseix.Message.Problem.Formatter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFormat = true;
        result.format_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFormat(global::Senseix.Message.Problem.Formatter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFormat &&
            result.format_ != global::Senseix.Message.Problem.Formatter.DefaultInstance) {
            result.format_ = global::Senseix.Message.Problem.Formatter.CreateBuilder(result.format_).MergeFrom(value).BuildPartial();
        } else {
          result.format_ = value;
        }
        result.hasFormat = true;
        return this;
      }
      public Builder ClearFormat() {
        PrepareBuilder();
        result.hasFormat = false;
        result.format_ = null;
        return this;
      }
    }
    static Answer() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Distractor : pb::GeneratedMessage<Distractor, Distractor.Builder> {
    private Distractor() { }
    private static readonly Distractor defaultInstance = new Distractor().MakeReadOnly();
    private static readonly string[] _distractorFieldNames = new string[] { "atom", "format" };
    private static readonly uint[] _distractorFieldTags = new uint[] { 10, 18 };
    public static Distractor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Distractor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Distractor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Distractor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Distractor, Distractor.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_Distractor__FieldAccessorTable; }
    }
    
    public const int AtomFieldNumber = 1;
    private pbc::PopsicleList<global::Senseix.Message.Atom.Atom> atom_ = new pbc::PopsicleList<global::Senseix.Message.Atom.Atom>();
    public scg::IList<global::Senseix.Message.Atom.Atom> AtomList {
      get { return atom_; }
    }
    public int AtomCount {
      get { return atom_.Count; }
    }
    public global::Senseix.Message.Atom.Atom GetAtom(int index) {
      return atom_[index];
    }
    
    public const int FormatFieldNumber = 2;
    private bool hasFormat;
    private global::Senseix.Message.Problem.Formatter format_;
    public bool HasFormat {
      get { return hasFormat; }
    }
    public global::Senseix.Message.Problem.Formatter Format {
      get { return format_ ?? global::Senseix.Message.Problem.Formatter.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Senseix.Message.Atom.Atom element in AtomList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _distractorFieldNames;
      if (atom_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], atom_);
      }
      if (hasFormat) {
        output.WriteMessage(2, field_names[1], Format);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Senseix.Message.Atom.Atom element in AtomList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasFormat) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Format);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Distractor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Distractor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Distractor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Distractor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Distractor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Distractor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Distractor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Distractor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Distractor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Distractor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Distractor MakeReadOnly() {
      atom_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Distractor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Distractor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Distractor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Distractor result;
      
      private Distractor PrepareBuilder() {
        if (resultIsReadOnly) {
          Distractor original = result;
          result = new Distractor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Distractor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.Distractor.Descriptor; }
      }
      
      public override Distractor DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.Distractor.DefaultInstance; }
      }
      
      public override Distractor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Distractor) {
          return MergeFrom((Distractor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Distractor other) {
        if (other == global::Senseix.Message.Problem.Distractor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.atom_.Count != 0) {
          result.atom_.Add(other.atom_);
        }
        if (other.HasFormat) {
          MergeFormat(other.Format);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_distractorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _distractorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.atom_, global::Senseix.Message.Atom.Atom.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::Senseix.Message.Problem.Formatter.Builder subBuilder = global::Senseix.Message.Problem.Formatter.CreateBuilder();
              if (result.hasFormat) {
                subBuilder.MergeFrom(Format);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Format = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Senseix.Message.Atom.Atom> AtomList {
        get { return PrepareBuilder().atom_; }
      }
      public int AtomCount {
        get { return result.AtomCount; }
      }
      public global::Senseix.Message.Atom.Atom GetAtom(int index) {
        return result.GetAtom(index);
      }
      public Builder SetAtom(int index, global::Senseix.Message.Atom.Atom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.atom_[index] = value;
        return this;
      }
      public Builder SetAtom(int index, global::Senseix.Message.Atom.Atom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.atom_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAtom(global::Senseix.Message.Atom.Atom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.atom_.Add(value);
        return this;
      }
      public Builder AddAtom(global::Senseix.Message.Atom.Atom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.atom_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAtom(scg::IEnumerable<global::Senseix.Message.Atom.Atom> values) {
        PrepareBuilder();
        result.atom_.Add(values);
        return this;
      }
      public Builder ClearAtom() {
        PrepareBuilder();
        result.atom_.Clear();
        return this;
      }
      
      public bool HasFormat {
       get { return result.hasFormat; }
      }
      public global::Senseix.Message.Problem.Formatter Format {
        get { return result.Format; }
        set { SetFormat(value); }
      }
      public Builder SetFormat(global::Senseix.Message.Problem.Formatter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormat = true;
        result.format_ = value;
        return this;
      }
      public Builder SetFormat(global::Senseix.Message.Problem.Formatter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFormat = true;
        result.format_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFormat(global::Senseix.Message.Problem.Formatter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFormat &&
            result.format_ != global::Senseix.Message.Problem.Formatter.DefaultInstance) {
            result.format_ = global::Senseix.Message.Problem.Formatter.CreateBuilder(result.format_).MergeFrom(value).BuildPartial();
        } else {
          result.format_ = value;
        }
        result.hasFormat = true;
        return this;
      }
      public Builder ClearFormat() {
        PrepareBuilder();
        result.hasFormat = false;
        result.format_ = null;
        return this;
      }
    }
    static Distractor() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProblemData : pb::GeneratedMessage<ProblemData, ProblemData.Builder> {
    private ProblemData() { }
    private static readonly ProblemData defaultInstance = new ProblemData().MakeReadOnly();
    private static readonly string[] _problemDataFieldNames = new string[] { "answer", "distractor", "question", "uuid" };
    private static readonly uint[] _problemDataFieldTags = new uint[] { 26, 34, 18, 10 };
    public static ProblemData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProblemData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProblemData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProblemData, ProblemData.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemData__FieldAccessorTable; }
    }
    
    public const int UuidFieldNumber = 1;
    private bool hasUuid;
    private string uuid_ = "";
    public bool HasUuid {
      get { return hasUuid; }
    }
    public string Uuid {
      get { return uuid_; }
    }
    
    public const int QuestionFieldNumber = 2;
    private bool hasQuestion;
    private global::Senseix.Message.Problem.Question question_;
    public bool HasQuestion {
      get { return hasQuestion; }
    }
    public global::Senseix.Message.Problem.Question Question {
      get { return question_ ?? global::Senseix.Message.Problem.Question.DefaultInstance; }
    }
    
    public const int AnswerFieldNumber = 3;
    private bool hasAnswer;
    private global::Senseix.Message.Problem.Answer answer_;
    public bool HasAnswer {
      get { return hasAnswer; }
    }
    public global::Senseix.Message.Problem.Answer Answer {
      get { return answer_ ?? global::Senseix.Message.Problem.Answer.DefaultInstance; }
    }
    
    public const int DistractorFieldNumber = 4;
    private bool hasDistractor;
    private global::Senseix.Message.Problem.Distractor distractor_;
    public bool HasDistractor {
      get { return hasDistractor; }
    }
    public global::Senseix.Message.Problem.Distractor Distractor {
      get { return distractor_ ?? global::Senseix.Message.Problem.Distractor.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUuid) return false;
        if (!hasQuestion) return false;
        if (!hasAnswer) return false;
        if (!hasDistractor) return false;
        if (!Question.IsInitialized) return false;
        if (!Answer.IsInitialized) return false;
        if (!Distractor.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _problemDataFieldNames;
      if (hasUuid) {
        output.WriteString(1, field_names[3], Uuid);
      }
      if (hasQuestion) {
        output.WriteMessage(2, field_names[2], Question);
      }
      if (hasAnswer) {
        output.WriteMessage(3, field_names[0], Answer);
      }
      if (hasDistractor) {
        output.WriteMessage(4, field_names[1], Distractor);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUuid) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Uuid);
        }
        if (hasQuestion) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Question);
        }
        if (hasAnswer) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Answer);
        }
        if (hasDistractor) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Distractor);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProblemData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProblemData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProblemData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProblemData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProblemData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProblemData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProblemData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProblemData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProblemData result;
      
      private ProblemData PrepareBuilder() {
        if (resultIsReadOnly) {
          ProblemData original = result;
          result = new ProblemData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProblemData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.ProblemData.Descriptor; }
      }
      
      public override ProblemData DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.ProblemData.DefaultInstance; }
      }
      
      public override ProblemData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProblemData) {
          return MergeFrom((ProblemData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProblemData other) {
        if (other == global::Senseix.Message.Problem.ProblemData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUuid) {
          Uuid = other.Uuid;
        }
        if (other.HasQuestion) {
          MergeQuestion(other.Question);
        }
        if (other.HasAnswer) {
          MergeAnswer(other.Answer);
        }
        if (other.HasDistractor) {
          MergeDistractor(other.Distractor);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_problemDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _problemDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUuid = input.ReadString(ref result.uuid_);
              break;
            }
            case 18: {
              global::Senseix.Message.Problem.Question.Builder subBuilder = global::Senseix.Message.Problem.Question.CreateBuilder();
              if (result.hasQuestion) {
                subBuilder.MergeFrom(Question);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Question = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Senseix.Message.Problem.Answer.Builder subBuilder = global::Senseix.Message.Problem.Answer.CreateBuilder();
              if (result.hasAnswer) {
                subBuilder.MergeFrom(Answer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Answer = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Senseix.Message.Problem.Distractor.Builder subBuilder = global::Senseix.Message.Problem.Distractor.CreateBuilder();
              if (result.hasDistractor) {
                subBuilder.MergeFrom(Distractor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Distractor = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUuid {
        get { return result.hasUuid; }
      }
      public string Uuid {
        get { return result.Uuid; }
        set { SetUuid(value); }
      }
      public Builder SetUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder ClearUuid() {
        PrepareBuilder();
        result.hasUuid = false;
        result.uuid_ = "";
        return this;
      }
      
      public bool HasQuestion {
       get { return result.hasQuestion; }
      }
      public global::Senseix.Message.Problem.Question Question {
        get { return result.Question; }
        set { SetQuestion(value); }
      }
      public Builder SetQuestion(global::Senseix.Message.Problem.Question value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQuestion = true;
        result.question_ = value;
        return this;
      }
      public Builder SetQuestion(global::Senseix.Message.Problem.Question.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQuestion = true;
        result.question_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQuestion(global::Senseix.Message.Problem.Question value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQuestion &&
            result.question_ != global::Senseix.Message.Problem.Question.DefaultInstance) {
            result.question_ = global::Senseix.Message.Problem.Question.CreateBuilder(result.question_).MergeFrom(value).BuildPartial();
        } else {
          result.question_ = value;
        }
        result.hasQuestion = true;
        return this;
      }
      public Builder ClearQuestion() {
        PrepareBuilder();
        result.hasQuestion = false;
        result.question_ = null;
        return this;
      }
      
      public bool HasAnswer {
       get { return result.hasAnswer; }
      }
      public global::Senseix.Message.Problem.Answer Answer {
        get { return result.Answer; }
        set { SetAnswer(value); }
      }
      public Builder SetAnswer(global::Senseix.Message.Problem.Answer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnswer = true;
        result.answer_ = value;
        return this;
      }
      public Builder SetAnswer(global::Senseix.Message.Problem.Answer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAnswer = true;
        result.answer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAnswer(global::Senseix.Message.Problem.Answer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAnswer &&
            result.answer_ != global::Senseix.Message.Problem.Answer.DefaultInstance) {
            result.answer_ = global::Senseix.Message.Problem.Answer.CreateBuilder(result.answer_).MergeFrom(value).BuildPartial();
        } else {
          result.answer_ = value;
        }
        result.hasAnswer = true;
        return this;
      }
      public Builder ClearAnswer() {
        PrepareBuilder();
        result.hasAnswer = false;
        result.answer_ = null;
        return this;
      }
      
      public bool HasDistractor {
       get { return result.hasDistractor; }
      }
      public global::Senseix.Message.Problem.Distractor Distractor {
        get { return result.Distractor; }
        set { SetDistractor(value); }
      }
      public Builder SetDistractor(global::Senseix.Message.Problem.Distractor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDistractor = true;
        result.distractor_ = value;
        return this;
      }
      public Builder SetDistractor(global::Senseix.Message.Problem.Distractor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDistractor = true;
        result.distractor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDistractor(global::Senseix.Message.Problem.Distractor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDistractor &&
            result.distractor_ != global::Senseix.Message.Problem.Distractor.DefaultInstance) {
            result.distractor_ = global::Senseix.Message.Problem.Distractor.CreateBuilder(result.distractor_).MergeFrom(value).BuildPartial();
        } else {
          result.distractor_ = value;
        }
        result.hasDistractor = true;
        return this;
      }
      public Builder ClearDistractor() {
        PrepareBuilder();
        result.hasDistractor = false;
        result.distractor_ = null;
        return this;
      }
    }
    static ProblemData() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AnswerIdentifier : pb::GeneratedMessage<AnswerIdentifier, AnswerIdentifier.Builder> {
    private AnswerIdentifier() { }
    private static readonly AnswerIdentifier defaultInstance = new AnswerIdentifier().MakeReadOnly();
    private static readonly string[] _answerIdentifierFieldNames = new string[] { "uuid" };
    private static readonly uint[] _answerIdentifierFieldTags = new uint[] { 10 };
    public static AnswerIdentifier DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AnswerIdentifier DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AnswerIdentifier ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_AnswerIdentifier__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AnswerIdentifier, AnswerIdentifier.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_AnswerIdentifier__FieldAccessorTable; }
    }
    
    public const int UuidFieldNumber = 1;
    private pbc::PopsicleList<string> uuid_ = new pbc::PopsicleList<string>();
    public scg::IList<string> UuidList {
      get { return pbc::Lists.AsReadOnly(uuid_); }
    }
    public int UuidCount {
      get { return uuid_.Count; }
    }
    public string GetUuid(int index) {
      return uuid_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _answerIdentifierFieldNames;
      if (uuid_.Count > 0) {
        output.WriteStringArray(1, field_names[0], uuid_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (string element in UuidList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * uuid_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AnswerIdentifier ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AnswerIdentifier ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AnswerIdentifier ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AnswerIdentifier ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AnswerIdentifier ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AnswerIdentifier ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AnswerIdentifier ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AnswerIdentifier ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AnswerIdentifier ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AnswerIdentifier ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AnswerIdentifier MakeReadOnly() {
      uuid_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AnswerIdentifier prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AnswerIdentifier, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AnswerIdentifier cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AnswerIdentifier result;
      
      private AnswerIdentifier PrepareBuilder() {
        if (resultIsReadOnly) {
          AnswerIdentifier original = result;
          result = new AnswerIdentifier();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AnswerIdentifier MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.AnswerIdentifier.Descriptor; }
      }
      
      public override AnswerIdentifier DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.AnswerIdentifier.DefaultInstance; }
      }
      
      public override AnswerIdentifier BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AnswerIdentifier) {
          return MergeFrom((AnswerIdentifier) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AnswerIdentifier other) {
        if (other == global::Senseix.Message.Problem.AnswerIdentifier.DefaultInstance) return this;
        PrepareBuilder();
        if (other.uuid_.Count != 0) {
          result.uuid_.Add(other.uuid_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_answerIdentifierFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _answerIdentifierFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.uuid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> UuidList {
        get { return PrepareBuilder().uuid_; }
      }
      public int UuidCount {
        get { return result.UuidCount; }
      }
      public string GetUuid(int index) {
        return result.GetUuid(index);
      }
      public Builder SetUuid(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.uuid_[index] = value;
        return this;
      }
      public Builder AddUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.uuid_.Add(value);
        return this;
      }
      public Builder AddRangeUuid(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.uuid_.Add(values);
        return this;
      }
      public Builder ClearUuid() {
        PrepareBuilder();
        result.uuid_.Clear();
        return this;
      }
    }
    static AnswerIdentifier() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProblemPost : pb::GeneratedMessage<ProblemPost, ProblemPost.Builder> {
    private ProblemPost() { }
    private static readonly ProblemPost defaultInstance = new ProblemPost().MakeReadOnly();
    private static readonly string[] _problemPostFieldNames = new string[] { "answer_ids", "answered_at_unix_time", "correct", "duration", "player_id", "problem_id", "skipped" };
    private static readonly uint[] _problemPostFieldTags = new uint[] { 26, 56, 48, 37, 10, 18, 40 };
    public static ProblemPost DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProblemPost DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProblemPost ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemPost__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProblemPost, ProblemPost.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemPost__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private string playerId_ = "";
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public string PlayerId {
      get { return playerId_; }
    }
    
    public const int ProblemIdFieldNumber = 2;
    private bool hasProblemId;
    private string problemId_ = "";
    public bool HasProblemId {
      get { return hasProblemId; }
    }
    public string ProblemId {
      get { return problemId_; }
    }
    
    public const int AnswerIdsFieldNumber = 3;
    private bool hasAnswerIds;
    private global::Senseix.Message.Problem.AnswerIdentifier answerIds_;
    public bool HasAnswerIds {
      get { return hasAnswerIds; }
    }
    public global::Senseix.Message.Problem.AnswerIdentifier AnswerIds {
      get { return answerIds_ ?? global::Senseix.Message.Problem.AnswerIdentifier.DefaultInstance; }
    }
    
    public const int DurationFieldNumber = 4;
    private bool hasDuration;
    private float duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public float Duration {
      get { return duration_; }
    }
    
    public const int SkippedFieldNumber = 5;
    private bool hasSkipped;
    private bool skipped_;
    public bool HasSkipped {
      get { return hasSkipped; }
    }
    public bool Skipped {
      get { return skipped_; }
    }
    
    public const int CorrectFieldNumber = 6;
    private bool hasCorrect;
    private bool correct_;
    public bool HasCorrect {
      get { return hasCorrect; }
    }
    public bool Correct {
      get { return correct_; }
    }
    
    public const int AnsweredAtUnixTimeFieldNumber = 7;
    private bool hasAnsweredAtUnixTime;
    private ulong answeredAtUnixTime_;
    public bool HasAnsweredAtUnixTime {
      get { return hasAnsweredAtUnixTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong AnsweredAtUnixTime {
      get { return answeredAtUnixTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasProblemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _problemPostFieldNames;
      if (hasPlayerId) {
        output.WriteString(1, field_names[4], PlayerId);
      }
      if (hasProblemId) {
        output.WriteString(2, field_names[5], ProblemId);
      }
      if (hasAnswerIds) {
        output.WriteMessage(3, field_names[0], AnswerIds);
      }
      if (hasDuration) {
        output.WriteFloat(4, field_names[3], Duration);
      }
      if (hasSkipped) {
        output.WriteBool(5, field_names[6], Skipped);
      }
      if (hasCorrect) {
        output.WriteBool(6, field_names[2], Correct);
      }
      if (hasAnsweredAtUnixTime) {
        output.WriteUInt64(7, field_names[1], AnsweredAtUnixTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerId);
        }
        if (hasProblemId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ProblemId);
        }
        if (hasAnswerIds) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, AnswerIds);
        }
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Duration);
        }
        if (hasSkipped) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Skipped);
        }
        if (hasCorrect) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Correct);
        }
        if (hasAnsweredAtUnixTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, AnsweredAtUnixTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProblemPost ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemPost ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemPost ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemPost ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemPost ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemPost ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProblemPost ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProblemPost ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProblemPost ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemPost ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProblemPost MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProblemPost prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProblemPost, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProblemPost cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProblemPost result;
      
      private ProblemPost PrepareBuilder() {
        if (resultIsReadOnly) {
          ProblemPost original = result;
          result = new ProblemPost();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProblemPost MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.ProblemPost.Descriptor; }
      }
      
      public override ProblemPost DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.ProblemPost.DefaultInstance; }
      }
      
      public override ProblemPost BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProblemPost) {
          return MergeFrom((ProblemPost) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProblemPost other) {
        if (other == global::Senseix.Message.Problem.ProblemPost.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasProblemId) {
          ProblemId = other.ProblemId;
        }
        if (other.HasAnswerIds) {
          MergeAnswerIds(other.AnswerIds);
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasSkipped) {
          Skipped = other.Skipped;
        }
        if (other.HasCorrect) {
          Correct = other.Correct;
        }
        if (other.HasAnsweredAtUnixTime) {
          AnsweredAtUnixTime = other.AnsweredAtUnixTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_problemPostFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _problemPostFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerId = input.ReadString(ref result.playerId_);
              break;
            }
            case 18: {
              result.hasProblemId = input.ReadString(ref result.problemId_);
              break;
            }
            case 26: {
              global::Senseix.Message.Problem.AnswerIdentifier.Builder subBuilder = global::Senseix.Message.Problem.AnswerIdentifier.CreateBuilder();
              if (result.hasAnswerIds) {
                subBuilder.MergeFrom(AnswerIds);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AnswerIds = subBuilder.BuildPartial();
              break;
            }
            case 37: {
              result.hasDuration = input.ReadFloat(ref result.duration_);
              break;
            }
            case 40: {
              result.hasSkipped = input.ReadBool(ref result.skipped_);
              break;
            }
            case 48: {
              result.hasCorrect = input.ReadBool(ref result.correct_);
              break;
            }
            case 56: {
              result.hasAnsweredAtUnixTime = input.ReadUInt64(ref result.answeredAtUnixTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public string PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = "";
        return this;
      }
      
      public bool HasProblemId {
        get { return result.hasProblemId; }
      }
      public string ProblemId {
        get { return result.ProblemId; }
        set { SetProblemId(value); }
      }
      public Builder SetProblemId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProblemId = true;
        result.problemId_ = value;
        return this;
      }
      public Builder ClearProblemId() {
        PrepareBuilder();
        result.hasProblemId = false;
        result.problemId_ = "";
        return this;
      }
      
      public bool HasAnswerIds {
       get { return result.hasAnswerIds; }
      }
      public global::Senseix.Message.Problem.AnswerIdentifier AnswerIds {
        get { return result.AnswerIds; }
        set { SetAnswerIds(value); }
      }
      public Builder SetAnswerIds(global::Senseix.Message.Problem.AnswerIdentifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnswerIds = true;
        result.answerIds_ = value;
        return this;
      }
      public Builder SetAnswerIds(global::Senseix.Message.Problem.AnswerIdentifier.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAnswerIds = true;
        result.answerIds_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAnswerIds(global::Senseix.Message.Problem.AnswerIdentifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAnswerIds &&
            result.answerIds_ != global::Senseix.Message.Problem.AnswerIdentifier.DefaultInstance) {
            result.answerIds_ = global::Senseix.Message.Problem.AnswerIdentifier.CreateBuilder(result.answerIds_).MergeFrom(value).BuildPartial();
        } else {
          result.answerIds_ = value;
        }
        result.hasAnswerIds = true;
        return this;
      }
      public Builder ClearAnswerIds() {
        PrepareBuilder();
        result.hasAnswerIds = false;
        result.answerIds_ = null;
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public float Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(float value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0F;
        return this;
      }
      
      public bool HasSkipped {
        get { return result.hasSkipped; }
      }
      public bool Skipped {
        get { return result.Skipped; }
        set { SetSkipped(value); }
      }
      public Builder SetSkipped(bool value) {
        PrepareBuilder();
        result.hasSkipped = true;
        result.skipped_ = value;
        return this;
      }
      public Builder ClearSkipped() {
        PrepareBuilder();
        result.hasSkipped = false;
        result.skipped_ = false;
        return this;
      }
      
      public bool HasCorrect {
        get { return result.hasCorrect; }
      }
      public bool Correct {
        get { return result.Correct; }
        set { SetCorrect(value); }
      }
      public Builder SetCorrect(bool value) {
        PrepareBuilder();
        result.hasCorrect = true;
        result.correct_ = value;
        return this;
      }
      public Builder ClearCorrect() {
        PrepareBuilder();
        result.hasCorrect = false;
        result.correct_ = false;
        return this;
      }
      
      public bool HasAnsweredAtUnixTime {
        get { return result.hasAnsweredAtUnixTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong AnsweredAtUnixTime {
        get { return result.AnsweredAtUnixTime; }
        set { SetAnsweredAtUnixTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAnsweredAtUnixTime(ulong value) {
        PrepareBuilder();
        result.hasAnsweredAtUnixTime = true;
        result.answeredAtUnixTime_ = value;
        return this;
      }
      public Builder ClearAnsweredAtUnixTime() {
        PrepareBuilder();
        result.hasAnsweredAtUnixTime = false;
        result.answeredAtUnixTime_ = 0UL;
        return this;
      }
    }
    static ProblemPost() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProblemPostRequest : pb::GeneratedMessage<ProblemPostRequest, ProblemPostRequest.Builder> {
    private ProblemPostRequest() { }
    private static readonly ProblemPostRequest defaultInstance = new ProblemPostRequest().MakeReadOnly();
    private static readonly string[] _problemPostRequestFieldNames = new string[] { "problem" };
    private static readonly uint[] _problemPostRequestFieldTags = new uint[] { 10 };
    public static ProblemPostRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProblemPostRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProblemPostRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemPostRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProblemPostRequest, ProblemPostRequest.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemPostRequest__FieldAccessorTable; }
    }
    
    public const int ProblemFieldNumber = 1;
    private pbc::PopsicleList<global::Senseix.Message.Problem.ProblemPost> problem_ = new pbc::PopsicleList<global::Senseix.Message.Problem.ProblemPost>();
    public scg::IList<global::Senseix.Message.Problem.ProblemPost> ProblemList {
      get { return problem_; }
    }
    public int ProblemCount {
      get { return problem_.Count; }
    }
    public global::Senseix.Message.Problem.ProblemPost GetProblem(int index) {
      return problem_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Senseix.Message.Problem.ProblemPost element in ProblemList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _problemPostRequestFieldNames;
      if (problem_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], problem_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Senseix.Message.Problem.ProblemPost element in ProblemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProblemPostRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemPostRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemPostRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemPostRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemPostRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemPostRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProblemPostRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProblemPostRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProblemPostRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemPostRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProblemPostRequest MakeReadOnly() {
      problem_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProblemPostRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProblemPostRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProblemPostRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProblemPostRequest result;
      
      private ProblemPostRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ProblemPostRequest original = result;
          result = new ProblemPostRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProblemPostRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.ProblemPostRequest.Descriptor; }
      }
      
      public override ProblemPostRequest DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.ProblemPostRequest.DefaultInstance; }
      }
      
      public override ProblemPostRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProblemPostRequest) {
          return MergeFrom((ProblemPostRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProblemPostRequest other) {
        if (other == global::Senseix.Message.Problem.ProblemPostRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.problem_.Count != 0) {
          result.problem_.Add(other.problem_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_problemPostRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _problemPostRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.problem_, global::Senseix.Message.Problem.ProblemPost.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Senseix.Message.Problem.ProblemPost> ProblemList {
        get { return PrepareBuilder().problem_; }
      }
      public int ProblemCount {
        get { return result.ProblemCount; }
      }
      public global::Senseix.Message.Problem.ProblemPost GetProblem(int index) {
        return result.GetProblem(index);
      }
      public Builder SetProblem(int index, global::Senseix.Message.Problem.ProblemPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.problem_[index] = value;
        return this;
      }
      public Builder SetProblem(int index, global::Senseix.Message.Problem.ProblemPost.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.problem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProblem(global::Senseix.Message.Problem.ProblemPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.problem_.Add(value);
        return this;
      }
      public Builder AddProblem(global::Senseix.Message.Problem.ProblemPost.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.problem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProblem(scg::IEnumerable<global::Senseix.Message.Problem.ProblemPost> values) {
        PrepareBuilder();
        result.problem_.Add(values);
        return this;
      }
      public Builder ClearProblem() {
        PrepareBuilder();
        result.problem_.Clear();
        return this;
      }
    }
    static ProblemPostRequest() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProblemPostResponse : pb::GeneratedMessage<ProblemPostResponse, ProblemPostResponse.Builder> {
    private ProblemPostResponse() { }
    private static readonly ProblemPostResponse defaultInstance = new ProblemPostResponse().MakeReadOnly();
    private static readonly string[] _problemPostResponseFieldNames = new string[] {  };
    private static readonly uint[] _problemPostResponseFieldTags = new uint[] {  };
    public static ProblemPostResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProblemPostResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProblemPostResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemPostResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProblemPostResponse, ProblemPostResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemPostResponse__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _problemPostResponseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProblemPostResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemPostResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemPostResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemPostResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemPostResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemPostResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProblemPostResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProblemPostResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProblemPostResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemPostResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProblemPostResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProblemPostResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProblemPostResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProblemPostResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProblemPostResponse result;
      
      private ProblemPostResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ProblemPostResponse original = result;
          result = new ProblemPostResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProblemPostResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.ProblemPostResponse.Descriptor; }
      }
      
      public override ProblemPostResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.ProblemPostResponse.DefaultInstance; }
      }
      
      public override ProblemPostResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProblemPostResponse) {
          return MergeFrom((ProblemPostResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProblemPostResponse other) {
        if (other == global::Senseix.Message.Problem.ProblemPostResponse.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_problemPostResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _problemPostResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static ProblemPostResponse() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProblemGetRequest : pb::GeneratedMessage<ProblemGetRequest, ProblemGetRequest.Builder> {
    private ProblemGetRequest() { }
    private static readonly ProblemGetRequest defaultInstance = new ProblemGetRequest().MakeReadOnly();
    private static readonly string[] _problemGetRequestFieldNames = new string[] { "player_id", "problem_count" };
    private static readonly uint[] _problemGetRequestFieldTags = new uint[] { 10, 16 };
    public static ProblemGetRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProblemGetRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProblemGetRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemGetRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProblemGetRequest, ProblemGetRequest.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemGetRequest__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private string playerId_ = "";
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public string PlayerId {
      get { return playerId_; }
    }
    
    public const int ProblemCountFieldNumber = 2;
    private bool hasProblemCount;
    private uint problemCount_;
    public bool HasProblemCount {
      get { return hasProblemCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ProblemCount {
      get { return problemCount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _problemGetRequestFieldNames;
      if (hasPlayerId) {
        output.WriteString(1, field_names[0], PlayerId);
      }
      if (hasProblemCount) {
        output.WriteUInt32(2, field_names[1], ProblemCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerId);
        }
        if (hasProblemCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ProblemCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProblemGetRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemGetRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemGetRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemGetRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemGetRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemGetRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProblemGetRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProblemGetRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProblemGetRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemGetRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProblemGetRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProblemGetRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProblemGetRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProblemGetRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProblemGetRequest result;
      
      private ProblemGetRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ProblemGetRequest original = result;
          result = new ProblemGetRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProblemGetRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.ProblemGetRequest.Descriptor; }
      }
      
      public override ProblemGetRequest DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.ProblemGetRequest.DefaultInstance; }
      }
      
      public override ProblemGetRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProblemGetRequest) {
          return MergeFrom((ProblemGetRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProblemGetRequest other) {
        if (other == global::Senseix.Message.Problem.ProblemGetRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasProblemCount) {
          ProblemCount = other.ProblemCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_problemGetRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _problemGetRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerId = input.ReadString(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasProblemCount = input.ReadUInt32(ref result.problemCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public string PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = "";
        return this;
      }
      
      public bool HasProblemCount {
        get { return result.hasProblemCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ProblemCount {
        get { return result.ProblemCount; }
        set { SetProblemCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProblemCount(uint value) {
        PrepareBuilder();
        result.hasProblemCount = true;
        result.problemCount_ = value;
        return this;
      }
      public Builder ClearProblemCount() {
        PrepareBuilder();
        result.hasProblemCount = false;
        result.problemCount_ = 0;
        return this;
      }
    }
    static ProblemGetRequest() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProblemGetResponse : pb::GeneratedMessage<ProblemGetResponse, ProblemGetResponse.Builder> {
    private ProblemGetResponse() { }
    private static readonly ProblemGetResponse defaultInstance = new ProblemGetResponse().MakeReadOnly();
    private static readonly string[] _problemGetResponseFieldNames = new string[] { "problem" };
    private static readonly uint[] _problemGetResponseFieldTags = new uint[] { 10 };
    public static ProblemGetResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProblemGetResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProblemGetResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemGetResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProblemGetResponse, ProblemGetResponse.Builder> InternalFieldAccessors {
      get { return global::Senseix.Message.Problem.Problem.internal__static_Senseix_Message_Problem_ProblemGetResponse__FieldAccessorTable; }
    }
    
    public const int ProblemFieldNumber = 1;
    private pbc::PopsicleList<global::Senseix.Message.Problem.ProblemData> problem_ = new pbc::PopsicleList<global::Senseix.Message.Problem.ProblemData>();
    public scg::IList<global::Senseix.Message.Problem.ProblemData> ProblemList {
      get { return problem_; }
    }
    public int ProblemCount {
      get { return problem_.Count; }
    }
    public global::Senseix.Message.Problem.ProblemData GetProblem(int index) {
      return problem_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Senseix.Message.Problem.ProblemData element in ProblemList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _problemGetResponseFieldNames;
      if (problem_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], problem_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Senseix.Message.Problem.ProblemData element in ProblemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProblemGetResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemGetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemGetResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProblemGetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProblemGetResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemGetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProblemGetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProblemGetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProblemGetResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProblemGetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProblemGetResponse MakeReadOnly() {
      problem_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProblemGetResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProblemGetResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProblemGetResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProblemGetResponse result;
      
      private ProblemGetResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ProblemGetResponse original = result;
          result = new ProblemGetResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProblemGetResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Senseix.Message.Problem.ProblemGetResponse.Descriptor; }
      }
      
      public override ProblemGetResponse DefaultInstanceForType {
        get { return global::Senseix.Message.Problem.ProblemGetResponse.DefaultInstance; }
      }
      
      public override ProblemGetResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProblemGetResponse) {
          return MergeFrom((ProblemGetResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProblemGetResponse other) {
        if (other == global::Senseix.Message.Problem.ProblemGetResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.problem_.Count != 0) {
          result.problem_.Add(other.problem_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_problemGetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _problemGetResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.problem_, global::Senseix.Message.Problem.ProblemData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Senseix.Message.Problem.ProblemData> ProblemList {
        get { return PrepareBuilder().problem_; }
      }
      public int ProblemCount {
        get { return result.ProblemCount; }
      }
      public global::Senseix.Message.Problem.ProblemData GetProblem(int index) {
        return result.GetProblem(index);
      }
      public Builder SetProblem(int index, global::Senseix.Message.Problem.ProblemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.problem_[index] = value;
        return this;
      }
      public Builder SetProblem(int index, global::Senseix.Message.Problem.ProblemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.problem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProblem(global::Senseix.Message.Problem.ProblemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.problem_.Add(value);
        return this;
      }
      public Builder AddProblem(global::Senseix.Message.Problem.ProblemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.problem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProblem(scg::IEnumerable<global::Senseix.Message.Problem.ProblemData> values) {
        PrepareBuilder();
        result.problem_.Add(values);
        return this;
      }
      public Builder ClearProblem() {
        PrepareBuilder();
        result.problem_.Clear();
        return this;
      }
    }
    static ProblemGetResponse() {
      object.ReferenceEquals(global::Senseix.Message.Problem.Problem.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
